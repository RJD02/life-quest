// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Achievement struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Icon        string     `json:"icon"`
	Progress    int        `json:"progress"`
	MaxProgress int        `json:"maxProgress"`
	Completed   bool       `json:"completed"`
	XpReward    int        `json:"xpReward"`
	BadgeReward *Badge     `json:"badgeReward,omitempty"`
	UnlockedAt  *time.Time `json:"unlockedAt,omitempty"`
}

type Badge struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Icon        string      `json:"icon"`
	Rarity      BadgeRarity `json:"rarity"`
	UnlockedAt  time.Time   `json:"unlockedAt"`
	Criteria    string      `json:"criteria"`
}

type BurndownPoint struct {
	Date            time.Time `json:"date"`
	RemainingPoints int       `json:"remainingPoints"`
	IdealRemaining  int       `json:"idealRemaining"`
}

type CreateFolderInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	Color       *string `json:"color,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	ParentID    *string `json:"parentId,omitempty"`
}

type CreatePomodoroSessionInput struct {
	Duration    int         `json:"duration"`
	TaskID      *string     `json:"taskId,omitempty"`
	SessionType SessionType `json:"sessionType"`
}

type CreateProjectInput struct {
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	Color       *string    `json:"color,omitempty"`
	Icon        *string    `json:"icon,omitempty"`
	Priority    Priority   `json:"priority"`
	StartDate   *time.Time `json:"startDate,omitempty"`
	EndDate     *time.Time `json:"endDate,omitempty"`
	FolderID    *string    `json:"folderId,omitempty"`
}

type CreateSprintInput struct {
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	Goal        *string   `json:"goal,omitempty"`
	StartDate   time.Time `json:"startDate"`
	EndDate     time.Time `json:"endDate"`
	ProjectID   *string   `json:"projectId,omitempty"`
}

type CreateTaskInput struct {
	Title             string         `json:"title"`
	Description       *string        `json:"description,omitempty"`
	Priority          Priority       `json:"priority"`
	XpValue           int            `json:"xpValue"`
	EstimatedDuration *int           `json:"estimatedDuration,omitempty"`
	Tags              []string       `json:"tags,omitempty"`
	DueDate           *time.Time     `json:"dueDate,omitempty"`
	ProjectID         *string        `json:"projectId,omitempty"`
	SkillCategory     *SkillCategory `json:"skillCategory,omitempty"`
}

type CreateUserInput struct {
	Email     string  `json:"email"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	AvatarURL *string `json:"avatarUrl,omitempty"`
}

type DailyStat struct {
	Date             time.Time `json:"date"`
	TasksCompleted   int       `json:"tasksCompleted"`
	XpEarned         int       `json:"xpEarned"`
	PomodoroSessions int       `json:"pomodoroSessions"`
	FocusTime        int       `json:"focusTime"`
	ProjectsWorkedOn int       `json:"projectsWorkedOn"`
}

type FocusAnalytics struct {
	AverageSessionDuration float64 `json:"averageSessionDuration"`
	TotalFocusTime         int     `json:"totalFocusTime"`
	FocusStreakDays        int     `json:"focusStreakDays"`
	PreferredFocusTime     string  `json:"preferredFocusTime"`
	FocusEfficiency        float64 `json:"focusEfficiency"`
}

type Folder struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description *string    `json:"description,omitempty"`
	Color       *string    `json:"color,omitempty"`
	Icon        *string    `json:"icon,omitempty"`
	IsArchived  bool       `json:"isArchived"`
	UserID      string     `json:"userId"`
	ParentID    *string    `json:"parentId,omitempty"`
	Children    []*Folder  `json:"children"`
	Projects    []*Project `json:"projects"`
	CreatedAt   time.Time  `json:"createdAt"`
	UpdatedAt   time.Time  `json:"updatedAt"`
}

type MonthlyStat struct {
	Month            int `json:"month"`
	Year             int `json:"year"`
	TasksCompleted   int `json:"tasksCompleted"`
	XpEarned         int `json:"xpEarned"`
	PomodoroSessions int `json:"pomodoroSessions"`
	FocusTime        int `json:"focusTime"`
	GoalsAchieved    int `json:"goalsAchieved"`
}

type Mutation struct {
}

type Notification struct {
	ID        string           `json:"id"`
	Title     string           `json:"title"`
	Message   string           `json:"message"`
	Type      NotificationType `json:"type"`
	Read      bool             `json:"read"`
	UserID    string           `json:"userId"`
	Data      *string          `json:"data,omitempty"`
	CreatedAt time.Time        `json:"createdAt"`
}

type NotificationSettings struct {
	Email            bool `json:"email"`
	Push             bool `json:"push"`
	SessionReminders bool `json:"sessionReminders"`
	DailyGoals       bool `json:"dailyGoals"`
	WeeklyReports    bool `json:"weeklyReports"`
}

type NotificationSettingsInput struct {
	Email            *bool `json:"email,omitempty"`
	Push             *bool `json:"push,omitempty"`
	SessionReminders *bool `json:"sessionReminders,omitempty"`
	DailyGoals       *bool `json:"dailyGoals,omitempty"`
	WeeklyReports    *bool `json:"weeklyReports,omitempty"`
}

type PomodoroSession struct {
	ID            string      `json:"id"`
	Duration      int         `json:"duration"`
	Completed     bool        `json:"completed"`
	StartTime     time.Time   `json:"startTime"`
	EndTime       *time.Time  `json:"endTime,omitempty"`
	BreakDuration *int        `json:"breakDuration,omitempty"`
	UserID        string      `json:"userId"`
	TaskID        *string     `json:"taskId,omitempty"`
	Task          *Task       `json:"task,omitempty"`
	SessionType   SessionType `json:"sessionType"`
	Interruptions int         `json:"interruptions"`
	Notes         *string     `json:"notes,omitempty"`
	FocusScore    *int        `json:"focusScore,omitempty"`
	CreatedAt     time.Time   `json:"createdAt"`
}

type PomodoroSettings struct {
	WorkDuration           int  `json:"workDuration"`
	ShortBreakDuration     int  `json:"shortBreakDuration"`
	LongBreakDuration      int  `json:"longBreakDuration"`
	SessionsUntilLongBreak int  `json:"sessionsUntilLongBreak"`
	AutoStartBreaks        bool `json:"autoStartBreaks"`
	AutoStartWork          bool `json:"autoStartWork"`
}

type PomodoroSettingsInput struct {
	WorkDuration           *int  `json:"workDuration,omitempty"`
	ShortBreakDuration     *int  `json:"shortBreakDuration,omitempty"`
	LongBreakDuration      *int  `json:"longBreakDuration,omitempty"`
	SessionsUntilLongBreak *int  `json:"sessionsUntilLongBreak,omitempty"`
	AutoStartBreaks        *bool `json:"autoStartBreaks,omitempty"`
	AutoStartWork          *bool `json:"autoStartWork,omitempty"`
}

type ProductivityAnalytics struct {
	AverageTasksPerDay   float64 `json:"averageTasksPerDay"`
	PeakProductivityHour int     `json:"peakProductivityHour"`
	MostProductiveDay    string  `json:"mostProductiveDay"`
	TaskCompletionRate   float64 `json:"taskCompletionRate"`
	AverageTaskDuration  float64 `json:"averageTaskDuration"`
}

type Project struct {
	ID            string                 `json:"id"`
	Name          string                 `json:"name"`
	Description   *string                `json:"description,omitempty"`
	Color         *string                `json:"color,omitempty"`
	Icon          *string                `json:"icon,omitempty"`
	Status        ProjectStatus          `json:"status"`
	Priority      Priority               `json:"priority"`
	StartDate     *time.Time             `json:"startDate,omitempty"`
	EndDate       *time.Time             `json:"endDate,omitempty"`
	IsArchived    bool                   `json:"isArchived"`
	UserID        string                 `json:"userId"`
	FolderID      *string                `json:"folderId,omitempty"`
	Folder        *Folder                `json:"folder,omitempty"`
	Tasks         []*Task                `json:"tasks"`
	Sprints       []*Sprint              `json:"sprints"`
	Collaborators []*ProjectCollaborator `json:"collaborators"`
	Analytics     *ProjectAnalytics      `json:"analytics"`
	CreatedAt     time.Time              `json:"createdAt"`
	UpdatedAt     time.Time              `json:"updatedAt"`
}

type ProjectAnalytics struct {
	TotalTasks          int     `json:"totalTasks"`
	CompletedTasks      int     `json:"completedTasks"`
	OverdueTasks        int     `json:"overdueTasks"`
	AverageTaskDuration float64 `json:"averageTaskDuration"`
	CompletionRate      float64 `json:"completionRate"`
	TimeSpent           int     `json:"timeSpent"`
	XpEarned            int     `json:"xpEarned"`
}

type ProjectCollaborator struct {
	ID        string           `json:"id"`
	ProjectID string           `json:"projectId"`
	UserID    string           `json:"userId"`
	User      *User            `json:"user"`
	Role      CollaboratorRole `json:"role"`
	InvitedAt time.Time        `json:"invitedAt"`
	JoinedAt  *time.Time       `json:"joinedAt,omitempty"`
}

type Query struct {
}

type Skill struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Icon        string        `json:"icon"`
	RequiredXp  int           `json:"requiredXp"`
	Unlocked    bool          `json:"unlocked"`
	Level       int           `json:"level"`
	MaxLevel    int           `json:"maxLevel"`
	Category    SkillCategory `json:"category"`
}

type SkillTree struct {
	ID         string        `json:"id"`
	Name       string        `json:"name"`
	Category   SkillCategory `json:"category"`
	TotalXp    int           `json:"totalXp"`
	Level      int           `json:"level"`
	Skills     []*Skill      `json:"skills"`
	UnlockedAt *time.Time    `json:"unlockedAt,omitempty"`
}

type Sprint struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Description *string          `json:"description,omitempty"`
	Goal        *string          `json:"goal,omitempty"`
	Status      SprintStatus     `json:"status"`
	StartDate   time.Time        `json:"startDate"`
	EndDate     time.Time        `json:"endDate"`
	Velocity    int              `json:"velocity"`
	UserID      string           `json:"userId"`
	ProjectID   *string          `json:"projectId,omitempty"`
	Project     *Project         `json:"project,omitempty"`
	Tasks       []*SprintTask    `json:"tasks"`
	Analytics   *SprintAnalytics `json:"analytics"`
	CreatedAt   time.Time        `json:"createdAt"`
	UpdatedAt   time.Time        `json:"updatedAt"`
}

type SprintAnalytics struct {
	PlannedStoryPoints   int              `json:"plannedStoryPoints"`
	CompletedStoryPoints int              `json:"completedStoryPoints"`
	BurndownData         []*BurndownPoint `json:"burndownData"`
	VelocityTrend        float64          `json:"velocityTrend"`
	CompletionRate       float64          `json:"completionRate"`
}

type SprintTask struct {
	ID          string    `json:"id"`
	SprintID    string    `json:"sprintId"`
	TaskID      string    `json:"taskId"`
	Task        *Task     `json:"task"`
	StoryPoints int       `json:"storyPoints"`
	AssignedAt  time.Time `json:"assignedAt"`
}

type Subscription struct {
}

type Subtask struct {
	ID        string    `json:"id"`
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
	TaskID    string    `json:"taskId"`
	CreatedAt time.Time `json:"createdAt"`
}

type Task struct {
	ID                string             `json:"id"`
	Title             string             `json:"title"`
	Description       *string            `json:"description,omitempty"`
	Status            TaskStatus         `json:"status"`
	Priority          Priority           `json:"priority"`
	XpValue           int                `json:"xpValue"`
	EstimatedDuration *int               `json:"estimatedDuration,omitempty"`
	ActualDuration    *int               `json:"actualDuration,omitempty"`
	Tags              []string           `json:"tags"`
	DueDate           *time.Time         `json:"dueDate,omitempty"`
	CompletedAt       *time.Time         `json:"completedAt,omitempty"`
	IsArchived        bool               `json:"isArchived"`
	UserID            string             `json:"userId"`
	ProjectID         *string            `json:"projectId,omitempty"`
	Project           *Project           `json:"project,omitempty"`
	SprintID          *string            `json:"sprintId,omitempty"`
	Sprint            *Sprint            `json:"sprint,omitempty"`
	AssigneeID        *string            `json:"assigneeId,omitempty"`
	Assignee          *User              `json:"assignee,omitempty"`
	PomodoroSessions  []*PomodoroSession `json:"pomodoroSessions"`
	Subtasks          []*Subtask         `json:"subtasks"`
	Comments          []*TaskComment     `json:"comments"`
	Attachments       []*TaskAttachment  `json:"attachments"`
	Dependencies      []*Task            `json:"dependencies"`
	Dependents        []*Task            `json:"dependents"`
	SkillCategory     *SkillCategory     `json:"skillCategory,omitempty"`
	CreatedAt         time.Time          `json:"createdAt"`
	UpdatedAt         time.Time          `json:"updatedAt"`
}

type TaskAttachment struct {
	ID         string    `json:"id"`
	Filename   string    `json:"filename"`
	URL        string    `json:"url"`
	Size       int       `json:"size"`
	MimeType   string    `json:"mimeType"`
	TaskID     string    `json:"taskId"`
	UploadedBy string    `json:"uploadedBy"`
	CreatedAt  time.Time `json:"createdAt"`
}

type TaskComment struct {
	ID        string    `json:"id"`
	Content   string    `json:"content"`
	TaskID    string    `json:"taskId"`
	UserID    string    `json:"userId"`
	User      *User     `json:"user"`
	CreatedAt time.Time `json:"createdAt"`
}

type UpdateFolderInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Color       *string `json:"color,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	IsArchived  *bool   `json:"isArchived,omitempty"`
}

type UpdatePomodoroSessionInput struct {
	Completed     *bool      `json:"completed,omitempty"`
	EndTime       *time.Time `json:"endTime,omitempty"`
	BreakDuration *int       `json:"breakDuration,omitempty"`
	Interruptions *int       `json:"interruptions,omitempty"`
	Notes         *string    `json:"notes,omitempty"`
	FocusScore    *int       `json:"focusScore,omitempty"`
}

type UpdateProjectInput struct {
	Name        *string        `json:"name,omitempty"`
	Description *string        `json:"description,omitempty"`
	Color       *string        `json:"color,omitempty"`
	Icon        *string        `json:"icon,omitempty"`
	Status      *ProjectStatus `json:"status,omitempty"`
	Priority    *Priority      `json:"priority,omitempty"`
	StartDate   *time.Time     `json:"startDate,omitempty"`
	EndDate     *time.Time     `json:"endDate,omitempty"`
	IsArchived  *bool          `json:"isArchived,omitempty"`
}

type UpdateSprintInput struct {
	Name        *string       `json:"name,omitempty"`
	Description *string       `json:"description,omitempty"`
	Goal        *string       `json:"goal,omitempty"`
	Status      *SprintStatus `json:"status,omitempty"`
	StartDate   *time.Time    `json:"startDate,omitempty"`
	EndDate     *time.Time    `json:"endDate,omitempty"`
}

type UpdateTaskInput struct {
	Title             *string        `json:"title,omitempty"`
	Description       *string        `json:"description,omitempty"`
	Status            *TaskStatus    `json:"status,omitempty"`
	Priority          *Priority      `json:"priority,omitempty"`
	XpValue           *int           `json:"xpValue,omitempty"`
	EstimatedDuration *int           `json:"estimatedDuration,omitempty"`
	Tags              []string       `json:"tags,omitempty"`
	DueDate           *time.Time     `json:"dueDate,omitempty"`
	SkillCategory     *SkillCategory `json:"skillCategory,omitempty"`
}

type UpdateUserInput struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	AvatarURL *string `json:"avatarUrl,omitempty"`
}

type UpdateUserPreferencesInput struct {
	Theme            *string                    `json:"theme,omitempty"`
	Notifications    *NotificationSettingsInput `json:"notifications,omitempty"`
	PomodoroSettings *PomodoroSettingsInput     `json:"pomodoroSettings,omitempty"`
	Timezone         *string                    `json:"timezone,omitempty"`
}

type User struct {
	ID            string           `json:"id"`
	Email         string           `json:"email"`
	FirstName     *string          `json:"firstName,omitempty"`
	LastName      *string          `json:"lastName,omitempty"`
	AvatarURL     *string          `json:"avatarUrl,omitempty"`
	Level         int              `json:"level"`
	TotalXp       int              `json:"totalXp"`
	CurrentStreak int              `json:"currentStreak"`
	MaxStreak     int              `json:"maxStreak"`
	CreatedAt     time.Time        `json:"createdAt"`
	UpdatedAt     time.Time        `json:"updatedAt"`
	SkillTrees    []*SkillTree     `json:"skillTrees"`
	Badges        []*Badge         `json:"badges"`
	Achievements  []*Achievement   `json:"achievements"`
	Preferences   *UserPreferences `json:"preferences"`
	Analytics     *UserAnalytics   `json:"analytics"`
}

type UserAnalytics struct {
	ID           string                 `json:"id"`
	UserID       string                 `json:"userId"`
	DailyStats   []*DailyStat           `json:"dailyStats"`
	WeeklyStats  []*WeeklyStat          `json:"weeklyStats"`
	MonthlyStats []*MonthlyStat         `json:"monthlyStats"`
	Productivity *ProductivityAnalytics `json:"productivity"`
	Focus        *FocusAnalytics        `json:"focus"`
}

type UserPreferences struct {
	ID               string                `json:"id"`
	UserID           string                `json:"userId"`
	Theme            string                `json:"theme"`
	Notifications    *NotificationSettings `json:"notifications"`
	PomodoroSettings *PomodoroSettings     `json:"pomodoroSettings"`
	Timezone         string                `json:"timezone"`
}

type WeeklyStat struct {
	WeekStart           time.Time `json:"weekStart"`
	TasksCompleted      int       `json:"tasksCompleted"`
	XpEarned            int       `json:"xpEarned"`
	PomodoroSessions    int       `json:"pomodoroSessions"`
	FocusTime           int       `json:"focusTime"`
	AverageProductivity float64   `json:"averageProductivity"`
}

type BadgeRarity string

const (
	BadgeRarityCommon    BadgeRarity = "COMMON"
	BadgeRarityRare      BadgeRarity = "RARE"
	BadgeRarityEpic      BadgeRarity = "EPIC"
	BadgeRarityLegendary BadgeRarity = "LEGENDARY"
)

var AllBadgeRarity = []BadgeRarity{
	BadgeRarityCommon,
	BadgeRarityRare,
	BadgeRarityEpic,
	BadgeRarityLegendary,
}

func (e BadgeRarity) IsValid() bool {
	switch e {
	case BadgeRarityCommon, BadgeRarityRare, BadgeRarityEpic, BadgeRarityLegendary:
		return true
	}
	return false
}

func (e BadgeRarity) String() string {
	return string(e)
}

func (e *BadgeRarity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BadgeRarity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BadgeRarity", str)
	}
	return nil
}

func (e BadgeRarity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *BadgeRarity) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e BadgeRarity) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CollaboratorRole string

const (
	CollaboratorRoleOwner  CollaboratorRole = "OWNER"
	CollaboratorRoleAdmin  CollaboratorRole = "ADMIN"
	CollaboratorRoleMember CollaboratorRole = "MEMBER"
	CollaboratorRoleViewer CollaboratorRole = "VIEWER"
)

var AllCollaboratorRole = []CollaboratorRole{
	CollaboratorRoleOwner,
	CollaboratorRoleAdmin,
	CollaboratorRoleMember,
	CollaboratorRoleViewer,
}

func (e CollaboratorRole) IsValid() bool {
	switch e {
	case CollaboratorRoleOwner, CollaboratorRoleAdmin, CollaboratorRoleMember, CollaboratorRoleViewer:
		return true
	}
	return false
}

func (e CollaboratorRole) String() string {
	return string(e)
}

func (e *CollaboratorRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CollaboratorRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CollaboratorRole", str)
	}
	return nil
}

func (e CollaboratorRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CollaboratorRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CollaboratorRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type NotificationType string

const (
	NotificationTypeTaskDue             NotificationType = "TASK_DUE"
	NotificationTypeSessionReminder     NotificationType = "SESSION_REMINDER"
	NotificationTypeAchievementUnlocked NotificationType = "ACHIEVEMENT_UNLOCKED"
	NotificationTypeBadgeEarned         NotificationType = "BADGE_EARNED"
	NotificationTypeSprintCompleted     NotificationType = "SPRINT_COMPLETED"
	NotificationTypeCollaborationInvite NotificationType = "COLLABORATION_INVITE"
	NotificationTypeSystemUpdate        NotificationType = "SYSTEM_UPDATE"
)

var AllNotificationType = []NotificationType{
	NotificationTypeTaskDue,
	NotificationTypeSessionReminder,
	NotificationTypeAchievementUnlocked,
	NotificationTypeBadgeEarned,
	NotificationTypeSprintCompleted,
	NotificationTypeCollaborationInvite,
	NotificationTypeSystemUpdate,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeTaskDue, NotificationTypeSessionReminder, NotificationTypeAchievementUnlocked, NotificationTypeBadgeEarned, NotificationTypeSprintCompleted, NotificationTypeCollaborationInvite, NotificationTypeSystemUpdate:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *NotificationType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e NotificationType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Priority string

const (
	PriorityLow    Priority = "LOW"
	PriorityMedium Priority = "MEDIUM"
	PriorityHigh   Priority = "HIGH"
	PriorityUrgent Priority = "URGENT"
)

var AllPriority = []Priority{
	PriorityLow,
	PriorityMedium,
	PriorityHigh,
	PriorityUrgent,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityLow, PriorityMedium, PriorityHigh, PriorityUrgent:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Priority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Priority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ProjectStatus string

const (
	ProjectStatusPlanning   ProjectStatus = "PLANNING"
	ProjectStatusInProgress ProjectStatus = "IN_PROGRESS"
	ProjectStatusOnHold     ProjectStatus = "ON_HOLD"
	ProjectStatusCompleted  ProjectStatus = "COMPLETED"
	ProjectStatusCancelled  ProjectStatus = "CANCELLED"
)

var AllProjectStatus = []ProjectStatus{
	ProjectStatusPlanning,
	ProjectStatusInProgress,
	ProjectStatusOnHold,
	ProjectStatusCompleted,
	ProjectStatusCancelled,
}

func (e ProjectStatus) IsValid() bool {
	switch e {
	case ProjectStatusPlanning, ProjectStatusInProgress, ProjectStatusOnHold, ProjectStatusCompleted, ProjectStatusCancelled:
		return true
	}
	return false
}

func (e ProjectStatus) String() string {
	return string(e)
}

func (e *ProjectStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectStatus", str)
	}
	return nil
}

func (e ProjectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ProjectStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ProjectStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SessionType string

const (
	SessionTypeWork       SessionType = "WORK"
	SessionTypeShortBreak SessionType = "SHORT_BREAK"
	SessionTypeLongBreak  SessionType = "LONG_BREAK"
)

var AllSessionType = []SessionType{
	SessionTypeWork,
	SessionTypeShortBreak,
	SessionTypeLongBreak,
}

func (e SessionType) IsValid() bool {
	switch e {
	case SessionTypeWork, SessionTypeShortBreak, SessionTypeLongBreak:
		return true
	}
	return false
}

func (e SessionType) String() string {
	return string(e)
}

func (e *SessionType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SessionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SessionType", str)
	}
	return nil
}

func (e SessionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SessionType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SessionType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SkillCategory string

const (
	SkillCategoryProductivity SkillCategory = "PRODUCTIVITY"
	SkillCategoryHealth       SkillCategory = "HEALTH"
	SkillCategoryLearning     SkillCategory = "LEARNING"
	SkillCategoryCreativity   SkillCategory = "CREATIVITY"
	SkillCategorySocial       SkillCategory = "SOCIAL"
	SkillCategoryFinance      SkillCategory = "FINANCE"
	SkillCategoryPersonal     SkillCategory = "PERSONAL"
)

var AllSkillCategory = []SkillCategory{
	SkillCategoryProductivity,
	SkillCategoryHealth,
	SkillCategoryLearning,
	SkillCategoryCreativity,
	SkillCategorySocial,
	SkillCategoryFinance,
	SkillCategoryPersonal,
}

func (e SkillCategory) IsValid() bool {
	switch e {
	case SkillCategoryProductivity, SkillCategoryHealth, SkillCategoryLearning, SkillCategoryCreativity, SkillCategorySocial, SkillCategoryFinance, SkillCategoryPersonal:
		return true
	}
	return false
}

func (e SkillCategory) String() string {
	return string(e)
}

func (e *SkillCategory) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SkillCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SkillCategory", str)
	}
	return nil
}

func (e SkillCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SkillCategory) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SkillCategory) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SprintStatus string

const (
	SprintStatusPlanning  SprintStatus = "PLANNING"
	SprintStatusActive    SprintStatus = "ACTIVE"
	SprintStatusCompleted SprintStatus = "COMPLETED"
	SprintStatusCancelled SprintStatus = "CANCELLED"
)

var AllSprintStatus = []SprintStatus{
	SprintStatusPlanning,
	SprintStatusActive,
	SprintStatusCompleted,
	SprintStatusCancelled,
}

func (e SprintStatus) IsValid() bool {
	switch e {
	case SprintStatusPlanning, SprintStatusActive, SprintStatusCompleted, SprintStatusCancelled:
		return true
	}
	return false
}

func (e SprintStatus) String() string {
	return string(e)
}

func (e *SprintStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SprintStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SprintStatus", str)
	}
	return nil
}

func (e SprintStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SprintStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SprintStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TaskStatus string

const (
	TaskStatusTodo       TaskStatus = "TODO"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusInReview   TaskStatus = "IN_REVIEW"
	TaskStatusCompleted  TaskStatus = "COMPLETED"
	TaskStatusCancelled  TaskStatus = "CANCELLED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusTodo,
	TaskStatusInProgress,
	TaskStatusInReview,
	TaskStatusCompleted,
	TaskStatusCancelled,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusTodo, TaskStatusInProgress, TaskStatusInReview, TaskStatusCompleted, TaskStatusCancelled:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TaskStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TaskStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
