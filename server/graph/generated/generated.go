// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"lifequest-server/graph/model"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Achievement struct {
		BadgeReward func(childComplexity int) int
		Completed   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		MaxProgress func(childComplexity int) int
		Name        func(childComplexity int) int
		Progress    func(childComplexity int) int
		UnlockedAt  func(childComplexity int) int
		XpReward    func(childComplexity int) int
	}

	Badge struct {
		Criteria    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		UnlockedAt  func(childComplexity int) int
	}

	BurndownPoint struct {
		Date            func(childComplexity int) int
		IdealRemaining  func(childComplexity int) int
		RemainingPoints func(childComplexity int) int
	}

	DailyStat struct {
		Date             func(childComplexity int) int
		FocusTime        func(childComplexity int) int
		PomodoroSessions func(childComplexity int) int
		ProjectsWorkedOn func(childComplexity int) int
		TasksCompleted   func(childComplexity int) int
		XpEarned         func(childComplexity int) int
	}

	FocusAnalytics struct {
		AverageSessionDuration func(childComplexity int) int
		FocusEfficiency        func(childComplexity int) int
		FocusStreakDays        func(childComplexity int) int
		PreferredFocusTime     func(childComplexity int) int
		TotalFocusTime         func(childComplexity int) int
	}

	Folder struct {
		Children    func(childComplexity int) int
		Color       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		IsArchived  func(childComplexity int) int
		Name        func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Projects    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	MonthlyStat struct {
		FocusTime        func(childComplexity int) int
		GoalsAchieved    func(childComplexity int) int
		Month            func(childComplexity int) int
		PomodoroSessions func(childComplexity int) int
		TasksCompleted   func(childComplexity int) int
		XpEarned         func(childComplexity int) int
		Year             func(childComplexity int) int
	}

	Mutation struct {
		AddTaskToSprint            func(childComplexity int, sprintID string, taskID string, storyPoints int) int
		CompletePomodoroSession    func(childComplexity int, id string) int
		CreateFolder               func(childComplexity int, input model.CreateFolderInput) int
		CreateProject              func(childComplexity int, input model.CreateProjectInput) int
		CreateSprint               func(childComplexity int, input model.CreateSprintInput) int
		CreateTask                 func(childComplexity int, input model.CreateTaskInput) int
		CreateUser                 func(childComplexity int, input model.CreateUserInput) int
		DeleteFolder               func(childComplexity int, id string) int
		DeleteProject              func(childComplexity int, id string) int
		DeleteSprint               func(childComplexity int, id string) int
		DeleteTask                 func(childComplexity int, id string) int
		InviteCollaborator         func(childComplexity int, projectID string, email string, role model.CollaboratorRole) int
		MarkAllNotificationsAsRead func(childComplexity int) int
		MarkNotificationAsRead     func(childComplexity int, id string) int
		RemoveCollaborator         func(childComplexity int, collaboratorID string) int
		RemoveTaskFromSprint       func(childComplexity int, sprintID string, taskID string) int
		StartPomodoroSession       func(childComplexity int, input model.CreatePomodoroSessionInput) int
		ToggleTaskStatus           func(childComplexity int, id string) int
		UpdateCollaboratorRole     func(childComplexity int, collaboratorID string, role model.CollaboratorRole) int
		UpdateFolder               func(childComplexity int, id string, input model.UpdateFolderInput) int
		UpdatePomodoroSession      func(childComplexity int, id string, input model.UpdatePomodoroSessionInput) int
		UpdateProject              func(childComplexity int, id string, input model.UpdateProjectInput) int
		UpdateSprint               func(childComplexity int, id string, input model.UpdateSprintInput) int
		UpdateTask                 func(childComplexity int, id string, input model.UpdateTaskInput) int
		UpdateUser                 func(childComplexity int, input model.UpdateUserInput) int
		UpdateUserPreferences      func(childComplexity int, input model.UpdateUserPreferencesInput) int
	}

	Notification struct {
		CreatedAt func(childComplexity int) int
		Data      func(childComplexity int) int
		ID        func(childComplexity int) int
		Message   func(childComplexity int) int
		Read      func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	NotificationSettings struct {
		DailyGoals       func(childComplexity int) int
		Email            func(childComplexity int) int
		Push             func(childComplexity int) int
		SessionReminders func(childComplexity int) int
		WeeklyReports    func(childComplexity int) int
	}

	PomodoroSession struct {
		BreakDuration func(childComplexity int) int
		Completed     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Duration      func(childComplexity int) int
		EndTime       func(childComplexity int) int
		FocusScore    func(childComplexity int) int
		ID            func(childComplexity int) int
		Interruptions func(childComplexity int) int
		Notes         func(childComplexity int) int
		SessionType   func(childComplexity int) int
		StartTime     func(childComplexity int) int
		Task          func(childComplexity int) int
		TaskID        func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	PomodoroSettings struct {
		AutoStartBreaks        func(childComplexity int) int
		AutoStartWork          func(childComplexity int) int
		LongBreakDuration      func(childComplexity int) int
		SessionsUntilLongBreak func(childComplexity int) int
		ShortBreakDuration     func(childComplexity int) int
		WorkDuration           func(childComplexity int) int
	}

	ProductivityAnalytics struct {
		AverageTaskDuration  func(childComplexity int) int
		AverageTasksPerDay   func(childComplexity int) int
		MostProductiveDay    func(childComplexity int) int
		PeakProductivityHour func(childComplexity int) int
		TaskCompletionRate   func(childComplexity int) int
	}

	Project struct {
		Analytics     func(childComplexity int) int
		Collaborators func(childComplexity int) int
		Color         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		Description   func(childComplexity int) int
		EndDate       func(childComplexity int) int
		Folder        func(childComplexity int) int
		FolderID      func(childComplexity int) int
		ID            func(childComplexity int) int
		Icon          func(childComplexity int) int
		IsArchived    func(childComplexity int) int
		Name          func(childComplexity int) int
		Priority      func(childComplexity int) int
		Sprints       func(childComplexity int) int
		StartDate     func(childComplexity int) int
		Status        func(childComplexity int) int
		Tasks         func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	ProjectAnalytics struct {
		AverageTaskDuration func(childComplexity int) int
		CompletedTasks      func(childComplexity int) int
		CompletionRate      func(childComplexity int) int
		OverdueTasks        func(childComplexity int) int
		TimeSpent           func(childComplexity int) int
		TotalTasks          func(childComplexity int) int
		XpEarned            func(childComplexity int) int
	}

	ProjectCollaborator struct {
		ID        func(childComplexity int) int
		InvitedAt func(childComplexity int) int
		JoinedAt  func(childComplexity int) int
		ProjectID func(childComplexity int) int
		Role      func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	Query struct {
		Achievements            func(childComplexity int) int
		ActiveSprints           func(childComplexity int) int
		Badges                  func(childComplexity int) int
		Folder                  func(childComplexity int, id string) int
		Folders                 func(childComplexity int) int
		Me                      func(childComplexity int) int
		Notifications           func(childComplexity int, unreadOnly *bool) int
		OverdueTasks            func(childComplexity int) int
		PomodoroSession         func(childComplexity int, id string) int
		PomodoroSessions        func(childComplexity int, date *time.Time) int
		Project                 func(childComplexity int, id string) int
		ProjectAnalytics        func(childComplexity int, projectID string) int
		Projects                func(childComplexity int) int
		SkillTrees              func(childComplexity int) int
		Sprint                  func(childComplexity int, id string) int
		SprintAnalytics         func(childComplexity int, sprintID string) int
		Sprints                 func(childComplexity int, status *model.SprintStatus) int
		Task                    func(childComplexity int, id string) int
		Tasks                   func(childComplexity int, status *model.TaskStatus, projectID *string, sprintID *string) int
		TasksByDueDate          func(childComplexity int, date time.Time) int
		TodaysSessions          func(childComplexity int) int
		UnreadNotificationCount func(childComplexity int) int
		User                    func(childComplexity int, id string) int
		UserAnalytics           func(childComplexity int, startDate time.Time, endDate time.Time) int
	}

	Skill struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Level       func(childComplexity int) int
		MaxLevel    func(childComplexity int) int
		Name        func(childComplexity int) int
		RequiredXp  func(childComplexity int) int
		Unlocked    func(childComplexity int) int
	}

	SkillTree struct {
		Category   func(childComplexity int) int
		ID         func(childComplexity int) int
		Level      func(childComplexity int) int
		Name       func(childComplexity int) int
		Skills     func(childComplexity int) int
		TotalXp    func(childComplexity int) int
		UnlockedAt func(childComplexity int) int
	}

	Sprint struct {
		Analytics   func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		EndDate     func(childComplexity int) int
		Goal        func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Project     func(childComplexity int) int
		ProjectID   func(childComplexity int) int
		StartDate   func(childComplexity int) int
		Status      func(childComplexity int) int
		Tasks       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		UserID      func(childComplexity int) int
		Velocity    func(childComplexity int) int
	}

	SprintAnalytics struct {
		BurndownData         func(childComplexity int) int
		CompletedStoryPoints func(childComplexity int) int
		CompletionRate       func(childComplexity int) int
		PlannedStoryPoints   func(childComplexity int) int
		VelocityTrend        func(childComplexity int) int
	}

	SprintTask struct {
		AssignedAt  func(childComplexity int) int
		ID          func(childComplexity int) int
		SprintID    func(childComplexity int) int
		StoryPoints func(childComplexity int) int
		Task        func(childComplexity int) int
		TaskID      func(childComplexity int) int
	}

	Subscription struct {
		NotificationAdded      func(childComplexity int) int
		PomodoroSessionUpdated func(childComplexity int, userID string) int
		SprintUpdated          func(childComplexity int, sprintID string) int
		TaskUpdated            func(childComplexity int, projectID string) int
	}

	Subtask struct {
		Completed func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		TaskID    func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	Task struct {
		ActualDuration    func(childComplexity int) int
		Assignee          func(childComplexity int) int
		AssigneeID        func(childComplexity int) int
		Attachments       func(childComplexity int) int
		Comments          func(childComplexity int) int
		CompletedAt       func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Dependencies      func(childComplexity int) int
		Dependents        func(childComplexity int) int
		Description       func(childComplexity int) int
		DueDate           func(childComplexity int) int
		EstimatedDuration func(childComplexity int) int
		ID                func(childComplexity int) int
		IsArchived        func(childComplexity int) int
		PomodoroSessions  func(childComplexity int) int
		Priority          func(childComplexity int) int
		Project           func(childComplexity int) int
		ProjectID         func(childComplexity int) int
		SkillCategory     func(childComplexity int) int
		Sprint            func(childComplexity int) int
		SprintID          func(childComplexity int) int
		Status            func(childComplexity int) int
		Subtasks          func(childComplexity int) int
		Tags              func(childComplexity int) int
		Title             func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
		UserID            func(childComplexity int) int
		XpValue           func(childComplexity int) int
	}

	TaskAttachment struct {
		CreatedAt  func(childComplexity int) int
		Filename   func(childComplexity int) int
		ID         func(childComplexity int) int
		MimeType   func(childComplexity int) int
		Size       func(childComplexity int) int
		TaskID     func(childComplexity int) int
		URL        func(childComplexity int) int
		UploadedBy func(childComplexity int) int
	}

	TaskComment struct {
		Content   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		TaskID    func(childComplexity int) int
		User      func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	User struct {
		Achievements  func(childComplexity int) int
		Analytics     func(childComplexity int) int
		AvatarURL     func(childComplexity int) int
		Badges        func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		CurrentStreak func(childComplexity int) int
		Email         func(childComplexity int) int
		FirstName     func(childComplexity int) int
		ID            func(childComplexity int) int
		LastName      func(childComplexity int) int
		Level         func(childComplexity int) int
		MaxStreak     func(childComplexity int) int
		Preferences   func(childComplexity int) int
		SkillTrees    func(childComplexity int) int
		TotalXp       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	UserAnalytics struct {
		DailyStats   func(childComplexity int) int
		Focus        func(childComplexity int) int
		ID           func(childComplexity int) int
		MonthlyStats func(childComplexity int) int
		Productivity func(childComplexity int) int
		UserID       func(childComplexity int) int
		WeeklyStats  func(childComplexity int) int
	}

	UserPreferences struct {
		ID               func(childComplexity int) int
		Notifications    func(childComplexity int) int
		PomodoroSettings func(childComplexity int) int
		Theme            func(childComplexity int) int
		Timezone         func(childComplexity int) int
		UserID           func(childComplexity int) int
	}

	WeeklyStat struct {
		AverageProductivity func(childComplexity int) int
		FocusTime           func(childComplexity int) int
		PomodoroSessions    func(childComplexity int) int
		TasksCompleted      func(childComplexity int) int
		WeekStart           func(childComplexity int) int
		XpEarned            func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error)
	UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error)
	UpdateUserPreferences(ctx context.Context, input model.UpdateUserPreferencesInput) (*model.UserPreferences, error)
	CreateFolder(ctx context.Context, input model.CreateFolderInput) (*model.Folder, error)
	UpdateFolder(ctx context.Context, id string, input model.UpdateFolderInput) (*model.Folder, error)
	DeleteFolder(ctx context.Context, id string) (bool, error)
	CreateProject(ctx context.Context, input model.CreateProjectInput) (*model.Project, error)
	UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*model.Project, error)
	DeleteProject(ctx context.Context, id string) (bool, error)
	CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error)
	UpdateTask(ctx context.Context, id string, input model.UpdateTaskInput) (*model.Task, error)
	DeleteTask(ctx context.Context, id string) (bool, error)
	ToggleTaskStatus(ctx context.Context, id string) (*model.Task, error)
	CreateSprint(ctx context.Context, input model.CreateSprintInput) (*model.Sprint, error)
	UpdateSprint(ctx context.Context, id string, input model.UpdateSprintInput) (*model.Sprint, error)
	DeleteSprint(ctx context.Context, id string) (bool, error)
	AddTaskToSprint(ctx context.Context, sprintID string, taskID string, storyPoints int) (*model.SprintTask, error)
	RemoveTaskFromSprint(ctx context.Context, sprintID string, taskID string) (bool, error)
	StartPomodoroSession(ctx context.Context, input model.CreatePomodoroSessionInput) (*model.PomodoroSession, error)
	UpdatePomodoroSession(ctx context.Context, id string, input model.UpdatePomodoroSessionInput) (*model.PomodoroSession, error)
	CompletePomodoroSession(ctx context.Context, id string) (*model.PomodoroSession, error)
	MarkNotificationAsRead(ctx context.Context, id string) (*model.Notification, error)
	MarkAllNotificationsAsRead(ctx context.Context) (bool, error)
	InviteCollaborator(ctx context.Context, projectID string, email string, role model.CollaboratorRole) (*model.ProjectCollaborator, error)
	UpdateCollaboratorRole(ctx context.Context, collaboratorID string, role model.CollaboratorRole) (*model.ProjectCollaborator, error)
	RemoveCollaborator(ctx context.Context, collaboratorID string) (bool, error)
}
type QueryResolver interface {
	Me(ctx context.Context) (*model.User, error)
	User(ctx context.Context, id string) (*model.User, error)
	Folders(ctx context.Context) ([]*model.Folder, error)
	Folder(ctx context.Context, id string) (*model.Folder, error)
	Projects(ctx context.Context) ([]*model.Project, error)
	Project(ctx context.Context, id string) (*model.Project, error)
	Tasks(ctx context.Context, status *model.TaskStatus, projectID *string, sprintID *string) ([]*model.Task, error)
	Task(ctx context.Context, id string) (*model.Task, error)
	TasksByDueDate(ctx context.Context, date time.Time) ([]*model.Task, error)
	OverdueTasks(ctx context.Context) ([]*model.Task, error)
	Sprints(ctx context.Context, status *model.SprintStatus) ([]*model.Sprint, error)
	Sprint(ctx context.Context, id string) (*model.Sprint, error)
	ActiveSprints(ctx context.Context) ([]*model.Sprint, error)
	PomodoroSessions(ctx context.Context, date *time.Time) ([]*model.PomodoroSession, error)
	PomodoroSession(ctx context.Context, id string) (*model.PomodoroSession, error)
	TodaysSessions(ctx context.Context) ([]*model.PomodoroSession, error)
	UserAnalytics(ctx context.Context, startDate time.Time, endDate time.Time) (*model.UserAnalytics, error)
	ProjectAnalytics(ctx context.Context, projectID string) (*model.ProjectAnalytics, error)
	SprintAnalytics(ctx context.Context, sprintID string) (*model.SprintAnalytics, error)
	Achievements(ctx context.Context) ([]*model.Achievement, error)
	Badges(ctx context.Context) ([]*model.Badge, error)
	SkillTrees(ctx context.Context) ([]*model.SkillTree, error)
	Notifications(ctx context.Context, unreadOnly *bool) ([]*model.Notification, error)
	UnreadNotificationCount(ctx context.Context) (int, error)
}
type SubscriptionResolver interface {
	NotificationAdded(ctx context.Context) (<-chan *model.Notification, error)
	PomodoroSessionUpdated(ctx context.Context, userID string) (<-chan *model.PomodoroSession, error)
	TaskUpdated(ctx context.Context, projectID string) (<-chan *model.Task, error)
	SprintUpdated(ctx context.Context, sprintID string) (<-chan *model.Sprint, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Achievement.badgeReward":
		if e.complexity.Achievement.BadgeReward == nil {
			break
		}

		return e.complexity.Achievement.BadgeReward(childComplexity), true
	case "Achievement.completed":
		if e.complexity.Achievement.Completed == nil {
			break
		}

		return e.complexity.Achievement.Completed(childComplexity), true
	case "Achievement.description":
		if e.complexity.Achievement.Description == nil {
			break
		}

		return e.complexity.Achievement.Description(childComplexity), true
	case "Achievement.id":
		if e.complexity.Achievement.ID == nil {
			break
		}

		return e.complexity.Achievement.ID(childComplexity), true
	case "Achievement.icon":
		if e.complexity.Achievement.Icon == nil {
			break
		}

		return e.complexity.Achievement.Icon(childComplexity), true
	case "Achievement.maxProgress":
		if e.complexity.Achievement.MaxProgress == nil {
			break
		}

		return e.complexity.Achievement.MaxProgress(childComplexity), true
	case "Achievement.name":
		if e.complexity.Achievement.Name == nil {
			break
		}

		return e.complexity.Achievement.Name(childComplexity), true
	case "Achievement.progress":
		if e.complexity.Achievement.Progress == nil {
			break
		}

		return e.complexity.Achievement.Progress(childComplexity), true
	case "Achievement.unlockedAt":
		if e.complexity.Achievement.UnlockedAt == nil {
			break
		}

		return e.complexity.Achievement.UnlockedAt(childComplexity), true
	case "Achievement.xpReward":
		if e.complexity.Achievement.XpReward == nil {
			break
		}

		return e.complexity.Achievement.XpReward(childComplexity), true

	case "Badge.criteria":
		if e.complexity.Badge.Criteria == nil {
			break
		}

		return e.complexity.Badge.Criteria(childComplexity), true
	case "Badge.description":
		if e.complexity.Badge.Description == nil {
			break
		}

		return e.complexity.Badge.Description(childComplexity), true
	case "Badge.id":
		if e.complexity.Badge.ID == nil {
			break
		}

		return e.complexity.Badge.ID(childComplexity), true
	case "Badge.icon":
		if e.complexity.Badge.Icon == nil {
			break
		}

		return e.complexity.Badge.Icon(childComplexity), true
	case "Badge.name":
		if e.complexity.Badge.Name == nil {
			break
		}

		return e.complexity.Badge.Name(childComplexity), true
	case "Badge.rarity":
		if e.complexity.Badge.Rarity == nil {
			break
		}

		return e.complexity.Badge.Rarity(childComplexity), true
	case "Badge.unlockedAt":
		if e.complexity.Badge.UnlockedAt == nil {
			break
		}

		return e.complexity.Badge.UnlockedAt(childComplexity), true

	case "BurndownPoint.date":
		if e.complexity.BurndownPoint.Date == nil {
			break
		}

		return e.complexity.BurndownPoint.Date(childComplexity), true
	case "BurndownPoint.idealRemaining":
		if e.complexity.BurndownPoint.IdealRemaining == nil {
			break
		}

		return e.complexity.BurndownPoint.IdealRemaining(childComplexity), true
	case "BurndownPoint.remainingPoints":
		if e.complexity.BurndownPoint.RemainingPoints == nil {
			break
		}

		return e.complexity.BurndownPoint.RemainingPoints(childComplexity), true

	case "DailyStat.date":
		if e.complexity.DailyStat.Date == nil {
			break
		}

		return e.complexity.DailyStat.Date(childComplexity), true
	case "DailyStat.focusTime":
		if e.complexity.DailyStat.FocusTime == nil {
			break
		}

		return e.complexity.DailyStat.FocusTime(childComplexity), true
	case "DailyStat.pomodoroSessions":
		if e.complexity.DailyStat.PomodoroSessions == nil {
			break
		}

		return e.complexity.DailyStat.PomodoroSessions(childComplexity), true
	case "DailyStat.projectsWorkedOn":
		if e.complexity.DailyStat.ProjectsWorkedOn == nil {
			break
		}

		return e.complexity.DailyStat.ProjectsWorkedOn(childComplexity), true
	case "DailyStat.tasksCompleted":
		if e.complexity.DailyStat.TasksCompleted == nil {
			break
		}

		return e.complexity.DailyStat.TasksCompleted(childComplexity), true
	case "DailyStat.xpEarned":
		if e.complexity.DailyStat.XpEarned == nil {
			break
		}

		return e.complexity.DailyStat.XpEarned(childComplexity), true

	case "FocusAnalytics.averageSessionDuration":
		if e.complexity.FocusAnalytics.AverageSessionDuration == nil {
			break
		}

		return e.complexity.FocusAnalytics.AverageSessionDuration(childComplexity), true
	case "FocusAnalytics.focusEfficiency":
		if e.complexity.FocusAnalytics.FocusEfficiency == nil {
			break
		}

		return e.complexity.FocusAnalytics.FocusEfficiency(childComplexity), true
	case "FocusAnalytics.focusStreakDays":
		if e.complexity.FocusAnalytics.FocusStreakDays == nil {
			break
		}

		return e.complexity.FocusAnalytics.FocusStreakDays(childComplexity), true
	case "FocusAnalytics.preferredFocusTime":
		if e.complexity.FocusAnalytics.PreferredFocusTime == nil {
			break
		}

		return e.complexity.FocusAnalytics.PreferredFocusTime(childComplexity), true
	case "FocusAnalytics.totalFocusTime":
		if e.complexity.FocusAnalytics.TotalFocusTime == nil {
			break
		}

		return e.complexity.FocusAnalytics.TotalFocusTime(childComplexity), true

	case "Folder.children":
		if e.complexity.Folder.Children == nil {
			break
		}

		return e.complexity.Folder.Children(childComplexity), true
	case "Folder.color":
		if e.complexity.Folder.Color == nil {
			break
		}

		return e.complexity.Folder.Color(childComplexity), true
	case "Folder.createdAt":
		if e.complexity.Folder.CreatedAt == nil {
			break
		}

		return e.complexity.Folder.CreatedAt(childComplexity), true
	case "Folder.description":
		if e.complexity.Folder.Description == nil {
			break
		}

		return e.complexity.Folder.Description(childComplexity), true
	case "Folder.id":
		if e.complexity.Folder.ID == nil {
			break
		}

		return e.complexity.Folder.ID(childComplexity), true
	case "Folder.icon":
		if e.complexity.Folder.Icon == nil {
			break
		}

		return e.complexity.Folder.Icon(childComplexity), true
	case "Folder.isArchived":
		if e.complexity.Folder.IsArchived == nil {
			break
		}

		return e.complexity.Folder.IsArchived(childComplexity), true
	case "Folder.name":
		if e.complexity.Folder.Name == nil {
			break
		}

		return e.complexity.Folder.Name(childComplexity), true
	case "Folder.parentId":
		if e.complexity.Folder.ParentID == nil {
			break
		}

		return e.complexity.Folder.ParentID(childComplexity), true
	case "Folder.projects":
		if e.complexity.Folder.Projects == nil {
			break
		}

		return e.complexity.Folder.Projects(childComplexity), true
	case "Folder.updatedAt":
		if e.complexity.Folder.UpdatedAt == nil {
			break
		}

		return e.complexity.Folder.UpdatedAt(childComplexity), true
	case "Folder.userId":
		if e.complexity.Folder.UserID == nil {
			break
		}

		return e.complexity.Folder.UserID(childComplexity), true

	case "MonthlyStat.focusTime":
		if e.complexity.MonthlyStat.FocusTime == nil {
			break
		}

		return e.complexity.MonthlyStat.FocusTime(childComplexity), true
	case "MonthlyStat.goalsAchieved":
		if e.complexity.MonthlyStat.GoalsAchieved == nil {
			break
		}

		return e.complexity.MonthlyStat.GoalsAchieved(childComplexity), true
	case "MonthlyStat.month":
		if e.complexity.MonthlyStat.Month == nil {
			break
		}

		return e.complexity.MonthlyStat.Month(childComplexity), true
	case "MonthlyStat.pomodoroSessions":
		if e.complexity.MonthlyStat.PomodoroSessions == nil {
			break
		}

		return e.complexity.MonthlyStat.PomodoroSessions(childComplexity), true
	case "MonthlyStat.tasksCompleted":
		if e.complexity.MonthlyStat.TasksCompleted == nil {
			break
		}

		return e.complexity.MonthlyStat.TasksCompleted(childComplexity), true
	case "MonthlyStat.xpEarned":
		if e.complexity.MonthlyStat.XpEarned == nil {
			break
		}

		return e.complexity.MonthlyStat.XpEarned(childComplexity), true
	case "MonthlyStat.year":
		if e.complexity.MonthlyStat.Year == nil {
			break
		}

		return e.complexity.MonthlyStat.Year(childComplexity), true

	case "Mutation.addTaskToSprint":
		if e.complexity.Mutation.AddTaskToSprint == nil {
			break
		}

		args, err := ec.field_Mutation_addTaskToSprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddTaskToSprint(childComplexity, args["sprintId"].(string), args["taskId"].(string), args["storyPoints"].(int)), true
	case "Mutation.completePomodoroSession":
		if e.complexity.Mutation.CompletePomodoroSession == nil {
			break
		}

		args, err := ec.field_Mutation_completePomodoroSession_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CompletePomodoroSession(childComplexity, args["id"].(string)), true
	case "Mutation.createFolder":
		if e.complexity.Mutation.CreateFolder == nil {
			break
		}

		args, err := ec.field_Mutation_createFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFolder(childComplexity, args["input"].(model.CreateFolderInput)), true
	case "Mutation.createProject":
		if e.complexity.Mutation.CreateProject == nil {
			break
		}

		args, err := ec.field_Mutation_createProject_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProject(childComplexity, args["input"].(model.CreateProjectInput)), true
	case "Mutation.createSprint":
		if e.complexity.Mutation.CreateSprint == nil {
			break
		}

		args, err := ec.field_Mutation_createSprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSprint(childComplexity, args["input"].(model.CreateSprintInput)), true
	case "Mutation.createTask":
		if e.complexity.Mutation.CreateTask == nil {
			break
		}

		args, err := ec.field_Mutation_createTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTask(childComplexity, args["input"].(model.CreateTaskInput)), true
	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(model.CreateUserInput)), true
	case "Mutation.deleteFolder":
		if e.complexity.Mutation.DeleteFolder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFolder(childComplexity, args["id"].(string)), true
	case "Mutation.deleteProject":
		if e.complexity.Mutation.DeleteProject == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProject_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProject(childComplexity, args["id"].(string)), true
	case "Mutation.deleteSprint":
		if e.complexity.Mutation.DeleteSprint == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSprint(childComplexity, args["id"].(string)), true
	case "Mutation.deleteTask":
		if e.complexity.Mutation.DeleteTask == nil {
			break
		}

		args, err := ec.field_Mutation_deleteTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteTask(childComplexity, args["id"].(string)), true
	case "Mutation.inviteCollaborator":
		if e.complexity.Mutation.InviteCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_inviteCollaborator_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteCollaborator(childComplexity, args["projectId"].(string), args["email"].(string), args["role"].(model.CollaboratorRole)), true
	case "Mutation.markAllNotificationsAsRead":
		if e.complexity.Mutation.MarkAllNotificationsAsRead == nil {
			break
		}

		return e.complexity.Mutation.MarkAllNotificationsAsRead(childComplexity), true
	case "Mutation.markNotificationAsRead":
		if e.complexity.Mutation.MarkNotificationAsRead == nil {
			break
		}

		args, err := ec.field_Mutation_markNotificationAsRead_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MarkNotificationAsRead(childComplexity, args["id"].(string)), true
	case "Mutation.removeCollaborator":
		if e.complexity.Mutation.RemoveCollaborator == nil {
			break
		}

		args, err := ec.field_Mutation_removeCollaborator_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveCollaborator(childComplexity, args["collaboratorId"].(string)), true
	case "Mutation.removeTaskFromSprint":
		if e.complexity.Mutation.RemoveTaskFromSprint == nil {
			break
		}

		args, err := ec.field_Mutation_removeTaskFromSprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveTaskFromSprint(childComplexity, args["sprintId"].(string), args["taskId"].(string)), true
	case "Mutation.startPomodoroSession":
		if e.complexity.Mutation.StartPomodoroSession == nil {
			break
		}

		args, err := ec.field_Mutation_startPomodoroSession_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartPomodoroSession(childComplexity, args["input"].(model.CreatePomodoroSessionInput)), true
	case "Mutation.toggleTaskStatus":
		if e.complexity.Mutation.ToggleTaskStatus == nil {
			break
		}

		args, err := ec.field_Mutation_toggleTaskStatus_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ToggleTaskStatus(childComplexity, args["id"].(string)), true
	case "Mutation.updateCollaboratorRole":
		if e.complexity.Mutation.UpdateCollaboratorRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateCollaboratorRole_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCollaboratorRole(childComplexity, args["collaboratorId"].(string), args["role"].(model.CollaboratorRole)), true
	case "Mutation.updateFolder":
		if e.complexity.Mutation.UpdateFolder == nil {
			break
		}

		args, err := ec.field_Mutation_updateFolder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFolder(childComplexity, args["id"].(string), args["input"].(model.UpdateFolderInput)), true
	case "Mutation.updatePomodoroSession":
		if e.complexity.Mutation.UpdatePomodoroSession == nil {
			break
		}

		args, err := ec.field_Mutation_updatePomodoroSession_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePomodoroSession(childComplexity, args["id"].(string), args["input"].(model.UpdatePomodoroSessionInput)), true
	case "Mutation.updateProject":
		if e.complexity.Mutation.UpdateProject == nil {
			break
		}

		args, err := ec.field_Mutation_updateProject_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProject(childComplexity, args["id"].(string), args["input"].(model.UpdateProjectInput)), true
	case "Mutation.updateSprint":
		if e.complexity.Mutation.UpdateSprint == nil {
			break
		}

		args, err := ec.field_Mutation_updateSprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSprint(childComplexity, args["id"].(string), args["input"].(model.UpdateSprintInput)), true
	case "Mutation.updateTask":
		if e.complexity.Mutation.UpdateTask == nil {
			break
		}

		args, err := ec.field_Mutation_updateTask_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTask(childComplexity, args["id"].(string), args["input"].(model.UpdateTaskInput)), true
	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUserInput)), true
	case "Mutation.updateUserPreferences":
		if e.complexity.Mutation.UpdateUserPreferences == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserPreferences_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserPreferences(childComplexity, args["input"].(model.UpdateUserPreferencesInput)), true

	case "Notification.createdAt":
		if e.complexity.Notification.CreatedAt == nil {
			break
		}

		return e.complexity.Notification.CreatedAt(childComplexity), true
	case "Notification.data":
		if e.complexity.Notification.Data == nil {
			break
		}

		return e.complexity.Notification.Data(childComplexity), true
	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true
	case "Notification.message":
		if e.complexity.Notification.Message == nil {
			break
		}

		return e.complexity.Notification.Message(childComplexity), true
	case "Notification.read":
		if e.complexity.Notification.Read == nil {
			break
		}

		return e.complexity.Notification.Read(childComplexity), true
	case "Notification.title":
		if e.complexity.Notification.Title == nil {
			break
		}

		return e.complexity.Notification.Title(childComplexity), true
	case "Notification.type":
		if e.complexity.Notification.Type == nil {
			break
		}

		return e.complexity.Notification.Type(childComplexity), true
	case "Notification.userId":
		if e.complexity.Notification.UserID == nil {
			break
		}

		return e.complexity.Notification.UserID(childComplexity), true

	case "NotificationSettings.dailyGoals":
		if e.complexity.NotificationSettings.DailyGoals == nil {
			break
		}

		return e.complexity.NotificationSettings.DailyGoals(childComplexity), true
	case "NotificationSettings.email":
		if e.complexity.NotificationSettings.Email == nil {
			break
		}

		return e.complexity.NotificationSettings.Email(childComplexity), true
	case "NotificationSettings.push":
		if e.complexity.NotificationSettings.Push == nil {
			break
		}

		return e.complexity.NotificationSettings.Push(childComplexity), true
	case "NotificationSettings.sessionReminders":
		if e.complexity.NotificationSettings.SessionReminders == nil {
			break
		}

		return e.complexity.NotificationSettings.SessionReminders(childComplexity), true
	case "NotificationSettings.weeklyReports":
		if e.complexity.NotificationSettings.WeeklyReports == nil {
			break
		}

		return e.complexity.NotificationSettings.WeeklyReports(childComplexity), true

	case "PomodoroSession.breakDuration":
		if e.complexity.PomodoroSession.BreakDuration == nil {
			break
		}

		return e.complexity.PomodoroSession.BreakDuration(childComplexity), true
	case "PomodoroSession.completed":
		if e.complexity.PomodoroSession.Completed == nil {
			break
		}

		return e.complexity.PomodoroSession.Completed(childComplexity), true
	case "PomodoroSession.createdAt":
		if e.complexity.PomodoroSession.CreatedAt == nil {
			break
		}

		return e.complexity.PomodoroSession.CreatedAt(childComplexity), true
	case "PomodoroSession.duration":
		if e.complexity.PomodoroSession.Duration == nil {
			break
		}

		return e.complexity.PomodoroSession.Duration(childComplexity), true
	case "PomodoroSession.endTime":
		if e.complexity.PomodoroSession.EndTime == nil {
			break
		}

		return e.complexity.PomodoroSession.EndTime(childComplexity), true
	case "PomodoroSession.focusScore":
		if e.complexity.PomodoroSession.FocusScore == nil {
			break
		}

		return e.complexity.PomodoroSession.FocusScore(childComplexity), true
	case "PomodoroSession.id":
		if e.complexity.PomodoroSession.ID == nil {
			break
		}

		return e.complexity.PomodoroSession.ID(childComplexity), true
	case "PomodoroSession.interruptions":
		if e.complexity.PomodoroSession.Interruptions == nil {
			break
		}

		return e.complexity.PomodoroSession.Interruptions(childComplexity), true
	case "PomodoroSession.notes":
		if e.complexity.PomodoroSession.Notes == nil {
			break
		}

		return e.complexity.PomodoroSession.Notes(childComplexity), true
	case "PomodoroSession.sessionType":
		if e.complexity.PomodoroSession.SessionType == nil {
			break
		}

		return e.complexity.PomodoroSession.SessionType(childComplexity), true
	case "PomodoroSession.startTime":
		if e.complexity.PomodoroSession.StartTime == nil {
			break
		}

		return e.complexity.PomodoroSession.StartTime(childComplexity), true
	case "PomodoroSession.task":
		if e.complexity.PomodoroSession.Task == nil {
			break
		}

		return e.complexity.PomodoroSession.Task(childComplexity), true
	case "PomodoroSession.taskId":
		if e.complexity.PomodoroSession.TaskID == nil {
			break
		}

		return e.complexity.PomodoroSession.TaskID(childComplexity), true
	case "PomodoroSession.userId":
		if e.complexity.PomodoroSession.UserID == nil {
			break
		}

		return e.complexity.PomodoroSession.UserID(childComplexity), true

	case "PomodoroSettings.autoStartBreaks":
		if e.complexity.PomodoroSettings.AutoStartBreaks == nil {
			break
		}

		return e.complexity.PomodoroSettings.AutoStartBreaks(childComplexity), true
	case "PomodoroSettings.autoStartWork":
		if e.complexity.PomodoroSettings.AutoStartWork == nil {
			break
		}

		return e.complexity.PomodoroSettings.AutoStartWork(childComplexity), true
	case "PomodoroSettings.longBreakDuration":
		if e.complexity.PomodoroSettings.LongBreakDuration == nil {
			break
		}

		return e.complexity.PomodoroSettings.LongBreakDuration(childComplexity), true
	case "PomodoroSettings.sessionsUntilLongBreak":
		if e.complexity.PomodoroSettings.SessionsUntilLongBreak == nil {
			break
		}

		return e.complexity.PomodoroSettings.SessionsUntilLongBreak(childComplexity), true
	case "PomodoroSettings.shortBreakDuration":
		if e.complexity.PomodoroSettings.ShortBreakDuration == nil {
			break
		}

		return e.complexity.PomodoroSettings.ShortBreakDuration(childComplexity), true
	case "PomodoroSettings.workDuration":
		if e.complexity.PomodoroSettings.WorkDuration == nil {
			break
		}

		return e.complexity.PomodoroSettings.WorkDuration(childComplexity), true

	case "ProductivityAnalytics.averageTaskDuration":
		if e.complexity.ProductivityAnalytics.AverageTaskDuration == nil {
			break
		}

		return e.complexity.ProductivityAnalytics.AverageTaskDuration(childComplexity), true
	case "ProductivityAnalytics.averageTasksPerDay":
		if e.complexity.ProductivityAnalytics.AverageTasksPerDay == nil {
			break
		}

		return e.complexity.ProductivityAnalytics.AverageTasksPerDay(childComplexity), true
	case "ProductivityAnalytics.mostProductiveDay":
		if e.complexity.ProductivityAnalytics.MostProductiveDay == nil {
			break
		}

		return e.complexity.ProductivityAnalytics.MostProductiveDay(childComplexity), true
	case "ProductivityAnalytics.peakProductivityHour":
		if e.complexity.ProductivityAnalytics.PeakProductivityHour == nil {
			break
		}

		return e.complexity.ProductivityAnalytics.PeakProductivityHour(childComplexity), true
	case "ProductivityAnalytics.taskCompletionRate":
		if e.complexity.ProductivityAnalytics.TaskCompletionRate == nil {
			break
		}

		return e.complexity.ProductivityAnalytics.TaskCompletionRate(childComplexity), true

	case "Project.analytics":
		if e.complexity.Project.Analytics == nil {
			break
		}

		return e.complexity.Project.Analytics(childComplexity), true
	case "Project.collaborators":
		if e.complexity.Project.Collaborators == nil {
			break
		}

		return e.complexity.Project.Collaborators(childComplexity), true
	case "Project.color":
		if e.complexity.Project.Color == nil {
			break
		}

		return e.complexity.Project.Color(childComplexity), true
	case "Project.createdAt":
		if e.complexity.Project.CreatedAt == nil {
			break
		}

		return e.complexity.Project.CreatedAt(childComplexity), true
	case "Project.description":
		if e.complexity.Project.Description == nil {
			break
		}

		return e.complexity.Project.Description(childComplexity), true
	case "Project.endDate":
		if e.complexity.Project.EndDate == nil {
			break
		}

		return e.complexity.Project.EndDate(childComplexity), true
	case "Project.folder":
		if e.complexity.Project.Folder == nil {
			break
		}

		return e.complexity.Project.Folder(childComplexity), true
	case "Project.folderId":
		if e.complexity.Project.FolderID == nil {
			break
		}

		return e.complexity.Project.FolderID(childComplexity), true
	case "Project.id":
		if e.complexity.Project.ID == nil {
			break
		}

		return e.complexity.Project.ID(childComplexity), true
	case "Project.icon":
		if e.complexity.Project.Icon == nil {
			break
		}

		return e.complexity.Project.Icon(childComplexity), true
	case "Project.isArchived":
		if e.complexity.Project.IsArchived == nil {
			break
		}

		return e.complexity.Project.IsArchived(childComplexity), true
	case "Project.name":
		if e.complexity.Project.Name == nil {
			break
		}

		return e.complexity.Project.Name(childComplexity), true
	case "Project.priority":
		if e.complexity.Project.Priority == nil {
			break
		}

		return e.complexity.Project.Priority(childComplexity), true
	case "Project.sprints":
		if e.complexity.Project.Sprints == nil {
			break
		}

		return e.complexity.Project.Sprints(childComplexity), true
	case "Project.startDate":
		if e.complexity.Project.StartDate == nil {
			break
		}

		return e.complexity.Project.StartDate(childComplexity), true
	case "Project.status":
		if e.complexity.Project.Status == nil {
			break
		}

		return e.complexity.Project.Status(childComplexity), true
	case "Project.tasks":
		if e.complexity.Project.Tasks == nil {
			break
		}

		return e.complexity.Project.Tasks(childComplexity), true
	case "Project.updatedAt":
		if e.complexity.Project.UpdatedAt == nil {
			break
		}

		return e.complexity.Project.UpdatedAt(childComplexity), true
	case "Project.userId":
		if e.complexity.Project.UserID == nil {
			break
		}

		return e.complexity.Project.UserID(childComplexity), true

	case "ProjectAnalytics.averageTaskDuration":
		if e.complexity.ProjectAnalytics.AverageTaskDuration == nil {
			break
		}

		return e.complexity.ProjectAnalytics.AverageTaskDuration(childComplexity), true
	case "ProjectAnalytics.completedTasks":
		if e.complexity.ProjectAnalytics.CompletedTasks == nil {
			break
		}

		return e.complexity.ProjectAnalytics.CompletedTasks(childComplexity), true
	case "ProjectAnalytics.completionRate":
		if e.complexity.ProjectAnalytics.CompletionRate == nil {
			break
		}

		return e.complexity.ProjectAnalytics.CompletionRate(childComplexity), true
	case "ProjectAnalytics.overdueTasks":
		if e.complexity.ProjectAnalytics.OverdueTasks == nil {
			break
		}

		return e.complexity.ProjectAnalytics.OverdueTasks(childComplexity), true
	case "ProjectAnalytics.timeSpent":
		if e.complexity.ProjectAnalytics.TimeSpent == nil {
			break
		}

		return e.complexity.ProjectAnalytics.TimeSpent(childComplexity), true
	case "ProjectAnalytics.totalTasks":
		if e.complexity.ProjectAnalytics.TotalTasks == nil {
			break
		}

		return e.complexity.ProjectAnalytics.TotalTasks(childComplexity), true
	case "ProjectAnalytics.xpEarned":
		if e.complexity.ProjectAnalytics.XpEarned == nil {
			break
		}

		return e.complexity.ProjectAnalytics.XpEarned(childComplexity), true

	case "ProjectCollaborator.id":
		if e.complexity.ProjectCollaborator.ID == nil {
			break
		}

		return e.complexity.ProjectCollaborator.ID(childComplexity), true
	case "ProjectCollaborator.invitedAt":
		if e.complexity.ProjectCollaborator.InvitedAt == nil {
			break
		}

		return e.complexity.ProjectCollaborator.InvitedAt(childComplexity), true
	case "ProjectCollaborator.joinedAt":
		if e.complexity.ProjectCollaborator.JoinedAt == nil {
			break
		}

		return e.complexity.ProjectCollaborator.JoinedAt(childComplexity), true
	case "ProjectCollaborator.projectId":
		if e.complexity.ProjectCollaborator.ProjectID == nil {
			break
		}

		return e.complexity.ProjectCollaborator.ProjectID(childComplexity), true
	case "ProjectCollaborator.role":
		if e.complexity.ProjectCollaborator.Role == nil {
			break
		}

		return e.complexity.ProjectCollaborator.Role(childComplexity), true
	case "ProjectCollaborator.user":
		if e.complexity.ProjectCollaborator.User == nil {
			break
		}

		return e.complexity.ProjectCollaborator.User(childComplexity), true
	case "ProjectCollaborator.userId":
		if e.complexity.ProjectCollaborator.UserID == nil {
			break
		}

		return e.complexity.ProjectCollaborator.UserID(childComplexity), true

	case "Query.achievements":
		if e.complexity.Query.Achievements == nil {
			break
		}

		return e.complexity.Query.Achievements(childComplexity), true
	case "Query.activeSprints":
		if e.complexity.Query.ActiveSprints == nil {
			break
		}

		return e.complexity.Query.ActiveSprints(childComplexity), true
	case "Query.badges":
		if e.complexity.Query.Badges == nil {
			break
		}

		return e.complexity.Query.Badges(childComplexity), true
	case "Query.folder":
		if e.complexity.Query.Folder == nil {
			break
		}

		args, err := ec.field_Query_folder_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Folder(childComplexity, args["id"].(string)), true
	case "Query.folders":
		if e.complexity.Query.Folders == nil {
			break
		}

		return e.complexity.Query.Folders(childComplexity), true
	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true
	case "Query.notifications":
		if e.complexity.Query.Notifications == nil {
			break
		}

		args, err := ec.field_Query_notifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notifications(childComplexity, args["unreadOnly"].(*bool)), true
	case "Query.overdueTasks":
		if e.complexity.Query.OverdueTasks == nil {
			break
		}

		return e.complexity.Query.OverdueTasks(childComplexity), true
	case "Query.pomodoroSession":
		if e.complexity.Query.PomodoroSession == nil {
			break
		}

		args, err := ec.field_Query_pomodoroSession_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PomodoroSession(childComplexity, args["id"].(string)), true
	case "Query.pomodoroSessions":
		if e.complexity.Query.PomodoroSessions == nil {
			break
		}

		args, err := ec.field_Query_pomodoroSessions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PomodoroSessions(childComplexity, args["date"].(*time.Time)), true
	case "Query.project":
		if e.complexity.Query.Project == nil {
			break
		}

		args, err := ec.field_Query_project_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Project(childComplexity, args["id"].(string)), true
	case "Query.projectAnalytics":
		if e.complexity.Query.ProjectAnalytics == nil {
			break
		}

		args, err := ec.field_Query_projectAnalytics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProjectAnalytics(childComplexity, args["projectId"].(string)), true
	case "Query.projects":
		if e.complexity.Query.Projects == nil {
			break
		}

		return e.complexity.Query.Projects(childComplexity), true
	case "Query.skillTrees":
		if e.complexity.Query.SkillTrees == nil {
			break
		}

		return e.complexity.Query.SkillTrees(childComplexity), true
	case "Query.sprint":
		if e.complexity.Query.Sprint == nil {
			break
		}

		args, err := ec.field_Query_sprint_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Sprint(childComplexity, args["id"].(string)), true
	case "Query.sprintAnalytics":
		if e.complexity.Query.SprintAnalytics == nil {
			break
		}

		args, err := ec.field_Query_sprintAnalytics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SprintAnalytics(childComplexity, args["sprintId"].(string)), true
	case "Query.sprints":
		if e.complexity.Query.Sprints == nil {
			break
		}

		args, err := ec.field_Query_sprints_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Sprints(childComplexity, args["status"].(*model.SprintStatus)), true
	case "Query.task":
		if e.complexity.Query.Task == nil {
			break
		}

		args, err := ec.field_Query_task_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Task(childComplexity, args["id"].(string)), true
	case "Query.tasks":
		if e.complexity.Query.Tasks == nil {
			break
		}

		args, err := ec.field_Query_tasks_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tasks(childComplexity, args["status"].(*model.TaskStatus), args["projectId"].(*string), args["sprintId"].(*string)), true
	case "Query.tasksByDueDate":
		if e.complexity.Query.TasksByDueDate == nil {
			break
		}

		args, err := ec.field_Query_tasksByDueDate_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TasksByDueDate(childComplexity, args["date"].(time.Time)), true
	case "Query.todaysSessions":
		if e.complexity.Query.TodaysSessions == nil {
			break
		}

		return e.complexity.Query.TodaysSessions(childComplexity), true
	case "Query.unreadNotificationCount":
		if e.complexity.Query.UnreadNotificationCount == nil {
			break
		}

		return e.complexity.Query.UnreadNotificationCount(childComplexity), true
	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(string)), true
	case "Query.userAnalytics":
		if e.complexity.Query.UserAnalytics == nil {
			break
		}

		args, err := ec.field_Query_userAnalytics_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserAnalytics(childComplexity, args["startDate"].(time.Time), args["endDate"].(time.Time)), true

	case "Skill.category":
		if e.complexity.Skill.Category == nil {
			break
		}

		return e.complexity.Skill.Category(childComplexity), true
	case "Skill.description":
		if e.complexity.Skill.Description == nil {
			break
		}

		return e.complexity.Skill.Description(childComplexity), true
	case "Skill.id":
		if e.complexity.Skill.ID == nil {
			break
		}

		return e.complexity.Skill.ID(childComplexity), true
	case "Skill.icon":
		if e.complexity.Skill.Icon == nil {
			break
		}

		return e.complexity.Skill.Icon(childComplexity), true
	case "Skill.level":
		if e.complexity.Skill.Level == nil {
			break
		}

		return e.complexity.Skill.Level(childComplexity), true
	case "Skill.maxLevel":
		if e.complexity.Skill.MaxLevel == nil {
			break
		}

		return e.complexity.Skill.MaxLevel(childComplexity), true
	case "Skill.name":
		if e.complexity.Skill.Name == nil {
			break
		}

		return e.complexity.Skill.Name(childComplexity), true
	case "Skill.requiredXp":
		if e.complexity.Skill.RequiredXp == nil {
			break
		}

		return e.complexity.Skill.RequiredXp(childComplexity), true
	case "Skill.unlocked":
		if e.complexity.Skill.Unlocked == nil {
			break
		}

		return e.complexity.Skill.Unlocked(childComplexity), true

	case "SkillTree.category":
		if e.complexity.SkillTree.Category == nil {
			break
		}

		return e.complexity.SkillTree.Category(childComplexity), true
	case "SkillTree.id":
		if e.complexity.SkillTree.ID == nil {
			break
		}

		return e.complexity.SkillTree.ID(childComplexity), true
	case "SkillTree.level":
		if e.complexity.SkillTree.Level == nil {
			break
		}

		return e.complexity.SkillTree.Level(childComplexity), true
	case "SkillTree.name":
		if e.complexity.SkillTree.Name == nil {
			break
		}

		return e.complexity.SkillTree.Name(childComplexity), true
	case "SkillTree.skills":
		if e.complexity.SkillTree.Skills == nil {
			break
		}

		return e.complexity.SkillTree.Skills(childComplexity), true
	case "SkillTree.totalXp":
		if e.complexity.SkillTree.TotalXp == nil {
			break
		}

		return e.complexity.SkillTree.TotalXp(childComplexity), true
	case "SkillTree.unlockedAt":
		if e.complexity.SkillTree.UnlockedAt == nil {
			break
		}

		return e.complexity.SkillTree.UnlockedAt(childComplexity), true

	case "Sprint.analytics":
		if e.complexity.Sprint.Analytics == nil {
			break
		}

		return e.complexity.Sprint.Analytics(childComplexity), true
	case "Sprint.createdAt":
		if e.complexity.Sprint.CreatedAt == nil {
			break
		}

		return e.complexity.Sprint.CreatedAt(childComplexity), true
	case "Sprint.description":
		if e.complexity.Sprint.Description == nil {
			break
		}

		return e.complexity.Sprint.Description(childComplexity), true
	case "Sprint.endDate":
		if e.complexity.Sprint.EndDate == nil {
			break
		}

		return e.complexity.Sprint.EndDate(childComplexity), true
	case "Sprint.goal":
		if e.complexity.Sprint.Goal == nil {
			break
		}

		return e.complexity.Sprint.Goal(childComplexity), true
	case "Sprint.id":
		if e.complexity.Sprint.ID == nil {
			break
		}

		return e.complexity.Sprint.ID(childComplexity), true
	case "Sprint.name":
		if e.complexity.Sprint.Name == nil {
			break
		}

		return e.complexity.Sprint.Name(childComplexity), true
	case "Sprint.project":
		if e.complexity.Sprint.Project == nil {
			break
		}

		return e.complexity.Sprint.Project(childComplexity), true
	case "Sprint.projectId":
		if e.complexity.Sprint.ProjectID == nil {
			break
		}

		return e.complexity.Sprint.ProjectID(childComplexity), true
	case "Sprint.startDate":
		if e.complexity.Sprint.StartDate == nil {
			break
		}

		return e.complexity.Sprint.StartDate(childComplexity), true
	case "Sprint.status":
		if e.complexity.Sprint.Status == nil {
			break
		}

		return e.complexity.Sprint.Status(childComplexity), true
	case "Sprint.tasks":
		if e.complexity.Sprint.Tasks == nil {
			break
		}

		return e.complexity.Sprint.Tasks(childComplexity), true
	case "Sprint.updatedAt":
		if e.complexity.Sprint.UpdatedAt == nil {
			break
		}

		return e.complexity.Sprint.UpdatedAt(childComplexity), true
	case "Sprint.userId":
		if e.complexity.Sprint.UserID == nil {
			break
		}

		return e.complexity.Sprint.UserID(childComplexity), true
	case "Sprint.velocity":
		if e.complexity.Sprint.Velocity == nil {
			break
		}

		return e.complexity.Sprint.Velocity(childComplexity), true

	case "SprintAnalytics.burndownData":
		if e.complexity.SprintAnalytics.BurndownData == nil {
			break
		}

		return e.complexity.SprintAnalytics.BurndownData(childComplexity), true
	case "SprintAnalytics.completedStoryPoints":
		if e.complexity.SprintAnalytics.CompletedStoryPoints == nil {
			break
		}

		return e.complexity.SprintAnalytics.CompletedStoryPoints(childComplexity), true
	case "SprintAnalytics.completionRate":
		if e.complexity.SprintAnalytics.CompletionRate == nil {
			break
		}

		return e.complexity.SprintAnalytics.CompletionRate(childComplexity), true
	case "SprintAnalytics.plannedStoryPoints":
		if e.complexity.SprintAnalytics.PlannedStoryPoints == nil {
			break
		}

		return e.complexity.SprintAnalytics.PlannedStoryPoints(childComplexity), true
	case "SprintAnalytics.velocityTrend":
		if e.complexity.SprintAnalytics.VelocityTrend == nil {
			break
		}

		return e.complexity.SprintAnalytics.VelocityTrend(childComplexity), true

	case "SprintTask.assignedAt":
		if e.complexity.SprintTask.AssignedAt == nil {
			break
		}

		return e.complexity.SprintTask.AssignedAt(childComplexity), true
	case "SprintTask.id":
		if e.complexity.SprintTask.ID == nil {
			break
		}

		return e.complexity.SprintTask.ID(childComplexity), true
	case "SprintTask.sprintId":
		if e.complexity.SprintTask.SprintID == nil {
			break
		}

		return e.complexity.SprintTask.SprintID(childComplexity), true
	case "SprintTask.storyPoints":
		if e.complexity.SprintTask.StoryPoints == nil {
			break
		}

		return e.complexity.SprintTask.StoryPoints(childComplexity), true
	case "SprintTask.task":
		if e.complexity.SprintTask.Task == nil {
			break
		}

		return e.complexity.SprintTask.Task(childComplexity), true
	case "SprintTask.taskId":
		if e.complexity.SprintTask.TaskID == nil {
			break
		}

		return e.complexity.SprintTask.TaskID(childComplexity), true

	case "Subscription.notificationAdded":
		if e.complexity.Subscription.NotificationAdded == nil {
			break
		}

		return e.complexity.Subscription.NotificationAdded(childComplexity), true
	case "Subscription.pomodoroSessionUpdated":
		if e.complexity.Subscription.PomodoroSessionUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_pomodoroSessionUpdated_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.PomodoroSessionUpdated(childComplexity, args["userId"].(string)), true
	case "Subscription.sprintUpdated":
		if e.complexity.Subscription.SprintUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_sprintUpdated_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.SprintUpdated(childComplexity, args["sprintId"].(string)), true
	case "Subscription.taskUpdated":
		if e.complexity.Subscription.TaskUpdated == nil {
			break
		}

		args, err := ec.field_Subscription_taskUpdated_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.TaskUpdated(childComplexity, args["projectId"].(string)), true

	case "Subtask.completed":
		if e.complexity.Subtask.Completed == nil {
			break
		}

		return e.complexity.Subtask.Completed(childComplexity), true
	case "Subtask.createdAt":
		if e.complexity.Subtask.CreatedAt == nil {
			break
		}

		return e.complexity.Subtask.CreatedAt(childComplexity), true
	case "Subtask.id":
		if e.complexity.Subtask.ID == nil {
			break
		}

		return e.complexity.Subtask.ID(childComplexity), true
	case "Subtask.taskId":
		if e.complexity.Subtask.TaskID == nil {
			break
		}

		return e.complexity.Subtask.TaskID(childComplexity), true
	case "Subtask.title":
		if e.complexity.Subtask.Title == nil {
			break
		}

		return e.complexity.Subtask.Title(childComplexity), true

	case "Task.actualDuration":
		if e.complexity.Task.ActualDuration == nil {
			break
		}

		return e.complexity.Task.ActualDuration(childComplexity), true
	case "Task.assignee":
		if e.complexity.Task.Assignee == nil {
			break
		}

		return e.complexity.Task.Assignee(childComplexity), true
	case "Task.assigneeId":
		if e.complexity.Task.AssigneeID == nil {
			break
		}

		return e.complexity.Task.AssigneeID(childComplexity), true
	case "Task.attachments":
		if e.complexity.Task.Attachments == nil {
			break
		}

		return e.complexity.Task.Attachments(childComplexity), true
	case "Task.comments":
		if e.complexity.Task.Comments == nil {
			break
		}

		return e.complexity.Task.Comments(childComplexity), true
	case "Task.completedAt":
		if e.complexity.Task.CompletedAt == nil {
			break
		}

		return e.complexity.Task.CompletedAt(childComplexity), true
	case "Task.createdAt":
		if e.complexity.Task.CreatedAt == nil {
			break
		}

		return e.complexity.Task.CreatedAt(childComplexity), true
	case "Task.dependencies":
		if e.complexity.Task.Dependencies == nil {
			break
		}

		return e.complexity.Task.Dependencies(childComplexity), true
	case "Task.dependents":
		if e.complexity.Task.Dependents == nil {
			break
		}

		return e.complexity.Task.Dependents(childComplexity), true
	case "Task.description":
		if e.complexity.Task.Description == nil {
			break
		}

		return e.complexity.Task.Description(childComplexity), true
	case "Task.dueDate":
		if e.complexity.Task.DueDate == nil {
			break
		}

		return e.complexity.Task.DueDate(childComplexity), true
	case "Task.estimatedDuration":
		if e.complexity.Task.EstimatedDuration == nil {
			break
		}

		return e.complexity.Task.EstimatedDuration(childComplexity), true
	case "Task.id":
		if e.complexity.Task.ID == nil {
			break
		}

		return e.complexity.Task.ID(childComplexity), true
	case "Task.isArchived":
		if e.complexity.Task.IsArchived == nil {
			break
		}

		return e.complexity.Task.IsArchived(childComplexity), true
	case "Task.pomodoroSessions":
		if e.complexity.Task.PomodoroSessions == nil {
			break
		}

		return e.complexity.Task.PomodoroSessions(childComplexity), true
	case "Task.priority":
		if e.complexity.Task.Priority == nil {
			break
		}

		return e.complexity.Task.Priority(childComplexity), true
	case "Task.project":
		if e.complexity.Task.Project == nil {
			break
		}

		return e.complexity.Task.Project(childComplexity), true
	case "Task.projectId":
		if e.complexity.Task.ProjectID == nil {
			break
		}

		return e.complexity.Task.ProjectID(childComplexity), true
	case "Task.skillCategory":
		if e.complexity.Task.SkillCategory == nil {
			break
		}

		return e.complexity.Task.SkillCategory(childComplexity), true
	case "Task.sprint":
		if e.complexity.Task.Sprint == nil {
			break
		}

		return e.complexity.Task.Sprint(childComplexity), true
	case "Task.sprintId":
		if e.complexity.Task.SprintID == nil {
			break
		}

		return e.complexity.Task.SprintID(childComplexity), true
	case "Task.status":
		if e.complexity.Task.Status == nil {
			break
		}

		return e.complexity.Task.Status(childComplexity), true
	case "Task.subtasks":
		if e.complexity.Task.Subtasks == nil {
			break
		}

		return e.complexity.Task.Subtasks(childComplexity), true
	case "Task.tags":
		if e.complexity.Task.Tags == nil {
			break
		}

		return e.complexity.Task.Tags(childComplexity), true
	case "Task.title":
		if e.complexity.Task.Title == nil {
			break
		}

		return e.complexity.Task.Title(childComplexity), true
	case "Task.updatedAt":
		if e.complexity.Task.UpdatedAt == nil {
			break
		}

		return e.complexity.Task.UpdatedAt(childComplexity), true
	case "Task.userId":
		if e.complexity.Task.UserID == nil {
			break
		}

		return e.complexity.Task.UserID(childComplexity), true
	case "Task.xpValue":
		if e.complexity.Task.XpValue == nil {
			break
		}

		return e.complexity.Task.XpValue(childComplexity), true

	case "TaskAttachment.createdAt":
		if e.complexity.TaskAttachment.CreatedAt == nil {
			break
		}

		return e.complexity.TaskAttachment.CreatedAt(childComplexity), true
	case "TaskAttachment.filename":
		if e.complexity.TaskAttachment.Filename == nil {
			break
		}

		return e.complexity.TaskAttachment.Filename(childComplexity), true
	case "TaskAttachment.id":
		if e.complexity.TaskAttachment.ID == nil {
			break
		}

		return e.complexity.TaskAttachment.ID(childComplexity), true
	case "TaskAttachment.mimeType":
		if e.complexity.TaskAttachment.MimeType == nil {
			break
		}

		return e.complexity.TaskAttachment.MimeType(childComplexity), true
	case "TaskAttachment.size":
		if e.complexity.TaskAttachment.Size == nil {
			break
		}

		return e.complexity.TaskAttachment.Size(childComplexity), true
	case "TaskAttachment.taskId":
		if e.complexity.TaskAttachment.TaskID == nil {
			break
		}

		return e.complexity.TaskAttachment.TaskID(childComplexity), true
	case "TaskAttachment.url":
		if e.complexity.TaskAttachment.URL == nil {
			break
		}

		return e.complexity.TaskAttachment.URL(childComplexity), true
	case "TaskAttachment.uploadedBy":
		if e.complexity.TaskAttachment.UploadedBy == nil {
			break
		}

		return e.complexity.TaskAttachment.UploadedBy(childComplexity), true

	case "TaskComment.content":
		if e.complexity.TaskComment.Content == nil {
			break
		}

		return e.complexity.TaskComment.Content(childComplexity), true
	case "TaskComment.createdAt":
		if e.complexity.TaskComment.CreatedAt == nil {
			break
		}

		return e.complexity.TaskComment.CreatedAt(childComplexity), true
	case "TaskComment.id":
		if e.complexity.TaskComment.ID == nil {
			break
		}

		return e.complexity.TaskComment.ID(childComplexity), true
	case "TaskComment.taskId":
		if e.complexity.TaskComment.TaskID == nil {
			break
		}

		return e.complexity.TaskComment.TaskID(childComplexity), true
	case "TaskComment.user":
		if e.complexity.TaskComment.User == nil {
			break
		}

		return e.complexity.TaskComment.User(childComplexity), true
	case "TaskComment.userId":
		if e.complexity.TaskComment.UserID == nil {
			break
		}

		return e.complexity.TaskComment.UserID(childComplexity), true

	case "User.achievements":
		if e.complexity.User.Achievements == nil {
			break
		}

		return e.complexity.User.Achievements(childComplexity), true
	case "User.analytics":
		if e.complexity.User.Analytics == nil {
			break
		}

		return e.complexity.User.Analytics(childComplexity), true
	case "User.avatarUrl":
		if e.complexity.User.AvatarURL == nil {
			break
		}

		return e.complexity.User.AvatarURL(childComplexity), true
	case "User.badges":
		if e.complexity.User.Badges == nil {
			break
		}

		return e.complexity.User.Badges(childComplexity), true
	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true
	case "User.currentStreak":
		if e.complexity.User.CurrentStreak == nil {
			break
		}

		return e.complexity.User.CurrentStreak(childComplexity), true
	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true
	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true
	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true
	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true
	case "User.level":
		if e.complexity.User.Level == nil {
			break
		}

		return e.complexity.User.Level(childComplexity), true
	case "User.maxStreak":
		if e.complexity.User.MaxStreak == nil {
			break
		}

		return e.complexity.User.MaxStreak(childComplexity), true
	case "User.preferences":
		if e.complexity.User.Preferences == nil {
			break
		}

		return e.complexity.User.Preferences(childComplexity), true
	case "User.skillTrees":
		if e.complexity.User.SkillTrees == nil {
			break
		}

		return e.complexity.User.SkillTrees(childComplexity), true
	case "User.totalXp":
		if e.complexity.User.TotalXp == nil {
			break
		}

		return e.complexity.User.TotalXp(childComplexity), true
	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "UserAnalytics.dailyStats":
		if e.complexity.UserAnalytics.DailyStats == nil {
			break
		}

		return e.complexity.UserAnalytics.DailyStats(childComplexity), true
	case "UserAnalytics.focus":
		if e.complexity.UserAnalytics.Focus == nil {
			break
		}

		return e.complexity.UserAnalytics.Focus(childComplexity), true
	case "UserAnalytics.id":
		if e.complexity.UserAnalytics.ID == nil {
			break
		}

		return e.complexity.UserAnalytics.ID(childComplexity), true
	case "UserAnalytics.monthlyStats":
		if e.complexity.UserAnalytics.MonthlyStats == nil {
			break
		}

		return e.complexity.UserAnalytics.MonthlyStats(childComplexity), true
	case "UserAnalytics.productivity":
		if e.complexity.UserAnalytics.Productivity == nil {
			break
		}

		return e.complexity.UserAnalytics.Productivity(childComplexity), true
	case "UserAnalytics.userId":
		if e.complexity.UserAnalytics.UserID == nil {
			break
		}

		return e.complexity.UserAnalytics.UserID(childComplexity), true
	case "UserAnalytics.weeklyStats":
		if e.complexity.UserAnalytics.WeeklyStats == nil {
			break
		}

		return e.complexity.UserAnalytics.WeeklyStats(childComplexity), true

	case "UserPreferences.id":
		if e.complexity.UserPreferences.ID == nil {
			break
		}

		return e.complexity.UserPreferences.ID(childComplexity), true
	case "UserPreferences.notifications":
		if e.complexity.UserPreferences.Notifications == nil {
			break
		}

		return e.complexity.UserPreferences.Notifications(childComplexity), true
	case "UserPreferences.pomodoroSettings":
		if e.complexity.UserPreferences.PomodoroSettings == nil {
			break
		}

		return e.complexity.UserPreferences.PomodoroSettings(childComplexity), true
	case "UserPreferences.theme":
		if e.complexity.UserPreferences.Theme == nil {
			break
		}

		return e.complexity.UserPreferences.Theme(childComplexity), true
	case "UserPreferences.timezone":
		if e.complexity.UserPreferences.Timezone == nil {
			break
		}

		return e.complexity.UserPreferences.Timezone(childComplexity), true
	case "UserPreferences.userId":
		if e.complexity.UserPreferences.UserID == nil {
			break
		}

		return e.complexity.UserPreferences.UserID(childComplexity), true

	case "WeeklyStat.averageProductivity":
		if e.complexity.WeeklyStat.AverageProductivity == nil {
			break
		}

		return e.complexity.WeeklyStat.AverageProductivity(childComplexity), true
	case "WeeklyStat.focusTime":
		if e.complexity.WeeklyStat.FocusTime == nil {
			break
		}

		return e.complexity.WeeklyStat.FocusTime(childComplexity), true
	case "WeeklyStat.pomodoroSessions":
		if e.complexity.WeeklyStat.PomodoroSessions == nil {
			break
		}

		return e.complexity.WeeklyStat.PomodoroSessions(childComplexity), true
	case "WeeklyStat.tasksCompleted":
		if e.complexity.WeeklyStat.TasksCompleted == nil {
			break
		}

		return e.complexity.WeeklyStat.TasksCompleted(childComplexity), true
	case "WeeklyStat.weekStart":
		if e.complexity.WeeklyStat.WeekStart == nil {
			break
		}

		return e.complexity.WeeklyStat.WeekStart(childComplexity), true
	case "WeeklyStat.xpEarned":
		if e.complexity.WeeklyStat.XpEarned == nil {
			break
		}

		return e.complexity.WeeklyStat.XpEarned(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateFolderInput,
		ec.unmarshalInputCreatePomodoroSessionInput,
		ec.unmarshalInputCreateProjectInput,
		ec.unmarshalInputCreateSprintInput,
		ec.unmarshalInputCreateTaskInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputNotificationSettingsInput,
		ec.unmarshalInputPomodoroSettingsInput,
		ec.unmarshalInputUpdateFolderInput,
		ec.unmarshalInputUpdatePomodoroSessionInput,
		ec.unmarshalInputUpdateProjectInput,
		ec.unmarshalInputUpdateSprintInput,
		ec.unmarshalInputUpdateTaskInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateUserPreferencesInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, opCtx.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema.graphqls", Input: `# LifeQuest V2 GraphQL Schema

scalar Time
scalar UUID

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  avatarUrl: String
  level: Int!
  totalXp: Int!
  currentStreak: Int!
  maxStreak: Int!
  createdAt: Time!
  updatedAt: Time!
  
  # V2 Features
  skillTrees: [SkillTree!]!
  badges: [Badge!]!
  achievements: [Achievement!]!
  preferences: UserPreferences!
  analytics: UserAnalytics!
}

type UserPreferences {
  id: ID!
  userId: ID!
  theme: String!
  notifications: NotificationSettings!
  pomodoroSettings: PomodoroSettings!
  timezone: String!
}

type NotificationSettings {
  email: Boolean!
  push: Boolean!
  sessionReminders: Boolean!
  dailyGoals: Boolean!
  weeklyReports: Boolean!
}

type PomodoroSettings {
  workDuration: Int!
  shortBreakDuration: Int!
  longBreakDuration: Int!
  sessionsUntilLongBreak: Int!
  autoStartBreaks: Boolean!
  autoStartWork: Boolean!
}

# Skill Trees System
type SkillTree {
  id: ID!
  name: String!
  category: SkillCategory!
  totalXp: Int!
  level: Int!
  skills: [Skill!]!
  unlockedAt: Time
}

enum SkillCategory {
  PRODUCTIVITY
  HEALTH
  LEARNING
  CREATIVITY
  SOCIAL
  FINANCE
  PERSONAL
}

type Skill {
  id: ID!
  name: String!
  description: String!
  icon: String!
  requiredXp: Int!
  unlocked: Boolean!
  level: Int!
  maxLevel: Int!
  category: SkillCategory!
}

# Badges & Achievements
type Badge {
  id: ID!
  name: String!
  description: String!
  icon: String!
  rarity: BadgeRarity!
  unlockedAt: Time!
  criteria: String!
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

type Achievement {
  id: ID!
  name: String!
  description: String!
  icon: String!
  progress: Int!
  maxProgress: Int!
  completed: Boolean!
  xpReward: Int!
  badgeReward: Badge
  unlockedAt: Time
}

# Analytics
type UserAnalytics {
  id: ID!
  userId: ID!
  dailyStats: [DailyStat!]!
  weeklyStats: [WeeklyStat!]!
  monthlyStats: [MonthlyStat!]!
  productivity: ProductivityAnalytics!
  focus: FocusAnalytics!
}

type DailyStat {
  date: Time!
  tasksCompleted: Int!
  xpEarned: Int!
  pomodoroSessions: Int!
  focusTime: Int! # in minutes
  projectsWorkedOn: Int!
}

type WeeklyStat {
  weekStart: Time!
  tasksCompleted: Int!
  xpEarned: Int!
  pomodoroSessions: Int!
  focusTime: Int!
  averageProductivity: Float!
}

type MonthlyStat {
  month: Int!
  year: Int!
  tasksCompleted: Int!
  xpEarned: Int!
  pomodoroSessions: Int!
  focusTime: Int!
  goalsAchieved: Int!
}

type ProductivityAnalytics {
  averageTasksPerDay: Float!
  peakProductivityHour: Int!
  mostProductiveDay: String!
  taskCompletionRate: Float!
  averageTaskDuration: Float!
}

type FocusAnalytics {
  averageSessionDuration: Float!
  totalFocusTime: Int!
  focusStreakDays: Int!
  preferredFocusTime: String!
  focusEfficiency: Float!
}

# Enhanced Folders and Projects
type Folder {
  id: ID!
  name: String!
  description: String
  color: String
  icon: String
  isArchived: Boolean!
  userId: ID!
  parentId: ID
  children: [Folder!]!
  projects: [Project!]!
  createdAt: Time!
  updatedAt: Time!
}

type Project {
  id: ID!
  name: String!
  description: String
  color: String
  icon: String
  status: ProjectStatus!
  priority: Priority!
  startDate: Time
  endDate: Time
  isArchived: Boolean!
  userId: ID!
  folderId: ID
  folder: Folder
  tasks: [Task!]!
  sprints: [Sprint!]!
  collaborators: [ProjectCollaborator!]!
  analytics: ProjectAnalytics!
  createdAt: Time!
  updatedAt: Time!
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

type ProjectCollaborator {
  id: ID!
  projectId: ID!
  userId: ID!
  user: User!
  role: CollaboratorRole!
  invitedAt: Time!
  joinedAt: Time
}

enum CollaboratorRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

type ProjectAnalytics {
  totalTasks: Int!
  completedTasks: Int!
  overdueTasks: Int!
  averageTaskDuration: Float!
  completionRate: Float!
  timeSpent: Int!
  xpEarned: Int!
}

# Enhanced Tasks
type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: Priority!
  xpValue: Int!
  estimatedDuration: Int # in minutes
  actualDuration: Int
  tags: [String!]!
  dueDate: Time
  completedAt: Time
  isArchived: Boolean!
  userId: ID!
  projectId: ID
  project: Project
  sprintId: ID
  sprint: Sprint
  assigneeId: ID
  assignee: User
  pomodoroSessions: [PomodoroSession!]!
  subtasks: [Subtask!]!
  comments: [TaskComment!]!
  attachments: [TaskAttachment!]!
  dependencies: [Task!]!
  dependents: [Task!]!
  skillCategory: SkillCategory
  createdAt: Time!
  updatedAt: Time!
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

type Subtask {
  id: ID!
  title: String!
  completed: Boolean!
  taskId: ID!
  createdAt: Time!
}

type TaskComment {
  id: ID!
  content: String!
  taskId: ID!
  userId: ID!
  user: User!
  createdAt: Time!
}

type TaskAttachment {
  id: ID!
  filename: String!
  url: String!
  size: Int!
  mimeType: String!
  taskId: ID!
  uploadedBy: ID!
  createdAt: Time!
}

# Sprints System
type Sprint {
  id: ID!
  name: String!
  description: String
  goal: String
  status: SprintStatus!
  startDate: Time!
  endDate: Time!
  velocity: Int!
  userId: ID!
  projectId: ID
  project: Project
  tasks: [SprintTask!]!
  analytics: SprintAnalytics!
  createdAt: Time!
  updatedAt: Time!
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

type SprintTask {
  id: ID!
  sprintId: ID!
  taskId: ID!
  task: Task!
  storyPoints: Int!
  assignedAt: Time!
}

type SprintAnalytics {
  plannedStoryPoints: Int!
  completedStoryPoints: Int!
  burndownData: [BurndownPoint!]!
  velocityTrend: Float!
  completionRate: Float!
}

type BurndownPoint {
  date: Time!
  remainingPoints: Int!
  idealRemaining: Int!
}

# Enhanced Pomodoro Sessions
type PomodoroSession {
  id: ID!
  duration: Int!
  completed: Boolean!
  startTime: Time!
  endTime: Time
  breakDuration: Int
  userId: ID!
  taskId: ID
  task: Task
  sessionType: SessionType!
  interruptions: Int!
  notes: String
  focusScore: Int # 1-10 rating
  createdAt: Time!
}

enum SessionType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}

# Real-time features
type Notification {
  id: ID!
  title: String!
  message: String!
  type: NotificationType!
  read: Boolean!
  userId: ID!
  data: String # JSON data
  createdAt: Time!
}

enum NotificationType {
  TASK_DUE
  SESSION_REMINDER
  ACHIEVEMENT_UNLOCKED
  BADGE_EARNED
  SPRINT_COMPLETED
  COLLABORATION_INVITE
  SYSTEM_UPDATE
}

# Input Types
input CreateUserInput {
  email: String!
  firstName: String
  lastName: String
  avatarUrl: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  avatarUrl: String
}

input UpdateUserPreferencesInput {
  theme: String
  notifications: NotificationSettingsInput
  pomodoroSettings: PomodoroSettingsInput
  timezone: String
}

input NotificationSettingsInput {
  email: Boolean
  push: Boolean
  sessionReminders: Boolean
  dailyGoals: Boolean
  weeklyReports: Boolean
}

input PomodoroSettingsInput {
  workDuration: Int
  shortBreakDuration: Int
  longBreakDuration: Int
  sessionsUntilLongBreak: Int
  autoStartBreaks: Boolean
  autoStartWork: Boolean
}

input CreateFolderInput {
  name: String!
  description: String
  color: String
  icon: String
  parentId: ID
}

input UpdateFolderInput {
  name: String
  description: String
  color: String
  icon: String
  isArchived: Boolean
}

input CreateProjectInput {
  name: String!
  description: String
  color: String
  icon: String
  priority: Priority!
  startDate: Time
  endDate: Time
  folderId: ID
}

input UpdateProjectInput {
  name: String
  description: String
  color: String
  icon: String
  status: ProjectStatus
  priority: Priority
  startDate: Time
  endDate: Time
  isArchived: Boolean
}

input CreateTaskInput {
  title: String!
  description: String
  priority: Priority!
  xpValue: Int!
  estimatedDuration: Int
  tags: [String!]
  dueDate: Time
  projectId: ID
  skillCategory: SkillCategory
}

input UpdateTaskInput {
  title: String
  description: String
  status: TaskStatus
  priority: Priority
  xpValue: Int
  estimatedDuration: Int
  tags: [String!]
  dueDate: Time
  skillCategory: SkillCategory
}

input CreateSprintInput {
  name: String!
  description: String
  goal: String
  startDate: Time!
  endDate: Time!
  projectId: ID
}

input UpdateSprintInput {
  name: String
  description: String
  goal: String
  status: SprintStatus
  startDate: Time
  endDate: Time
}

input CreatePomodoroSessionInput {
  duration: Int!
  taskId: ID
  sessionType: SessionType!
}

input UpdatePomodoroSessionInput {
  completed: Boolean
  endTime: Time
  breakDuration: Int
  interruptions: Int
  notes: String
  focusScore: Int
}

# Queries
type Query {
  # User queries
  me: User!
  user(id: ID!): User
  
  # Folder queries
  folders: [Folder!]!
  folder(id: ID!): Folder
  
  # Project queries
  projects: [Project!]!
  project(id: ID!): Project
  
  # Task queries
  tasks(status: TaskStatus, projectId: ID, sprintId: ID): [Task!]!
  task(id: ID!): Task
  tasksByDueDate(date: Time!): [Task!]!
  overdueTasks: [Task!]!
  
  # Sprint queries
  sprints(status: SprintStatus): [Sprint!]!
  sprint(id: ID!): Sprint
  activeSprints: [Sprint!]!
  
  # Pomodoro queries
  pomodoroSessions(date: Time): [PomodoroSession!]!
  pomodoroSession(id: ID!): PomodoroSession
  todaysSessions: [PomodoroSession!]!
  
  # Analytics queries
  userAnalytics(startDate: Time!, endDate: Time!): UserAnalytics!
  projectAnalytics(projectId: ID!): ProjectAnalytics!
  sprintAnalytics(sprintId: ID!): SprintAnalytics!
  
  # Achievement queries
  achievements: [Achievement!]!
  badges: [Badge!]!
  skillTrees: [SkillTree!]!
  
  # Notification queries
  notifications(unreadOnly: Boolean): [Notification!]!
  unreadNotificationCount: Int!
}

# Mutations
type Mutation {
  # User mutations
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  updateUserPreferences(input: UpdateUserPreferencesInput!): UserPreferences!
  
  # Folder mutations
  createFolder(input: CreateFolderInput!): Folder!
  updateFolder(id: ID!, input: UpdateFolderInput!): Folder!
  deleteFolder(id: ID!): Boolean!
  
  # Project mutations
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): Boolean!
  
  # Task mutations
  createTask(input: CreateTaskInput!): Task!
  updateTask(id: ID!, input: UpdateTaskInput!): Task!
  deleteTask(id: ID!): Boolean!
  toggleTaskStatus(id: ID!): Task!
  
  # Sprint mutations
  createSprint(input: CreateSprintInput!): Sprint!
  updateSprint(id: ID!, input: UpdateSprintInput!): Sprint!
  deleteSprint(id: ID!): Boolean!
  addTaskToSprint(sprintId: ID!, taskId: ID!, storyPoints: Int!): SprintTask!
  removeTaskFromSprint(sprintId: ID!, taskId: ID!): Boolean!
  
  # Pomodoro mutations
  startPomodoroSession(input: CreatePomodoroSessionInput!): PomodoroSession!
  updatePomodoroSession(id: ID!, input: UpdatePomodoroSessionInput!): PomodoroSession!
  completePomodoroSession(id: ID!): PomodoroSession!
  
  # Notification mutations
  markNotificationAsRead(id: ID!): Notification!
  markAllNotificationsAsRead: Boolean!
  
  # Collaboration mutations
  inviteCollaborator(projectId: ID!, email: String!, role: CollaboratorRole!): ProjectCollaborator!
  updateCollaboratorRole(collaboratorId: ID!, role: CollaboratorRole!): ProjectCollaborator!
  removeCollaborator(collaboratorId: ID!): Boolean!
}

# Subscriptions for real-time features
type Subscription {
  # Real-time notifications
  notificationAdded: Notification!
  
  # Real-time session updates
  pomodoroSessionUpdated(userId: ID!): PomodoroSession!
  
  # Real-time task updates (for collaboration)
  taskUpdated(projectId: ID!): Task!
  
  # Real-time sprint updates
  sprintUpdated(sprintId: ID!): Sprint!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_addTaskToSprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sprintId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["sprintId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "taskId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["taskId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "storyPoints", ec.unmarshalNInt2int)
	if err != nil {
		return nil, err
	}
	args["storyPoints"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_completePomodoroSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateFolderInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateFolderInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateProjectInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateProjectInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateSprintInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateSprintInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createTask_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateTaskInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateTaskInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreateUserInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteTask_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteCollaborator_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "projectId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["projectId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "email", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["email"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "role", ec.unmarshalNCollaboratorRole2lifequestᚑserverᚋgraphᚋmodelᚐCollaboratorRole)
	if err != nil {
		return nil, err
	}
	args["role"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_markNotificationAsRead_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeCollaborator_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "collaboratorId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["collaboratorId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeTaskFromSprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sprintId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["sprintId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "taskId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["taskId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_startPomodoroSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNCreatePomodoroSessionInput2lifequestᚑserverᚋgraphᚋmodelᚐCreatePomodoroSessionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_toggleTaskStatus_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCollaboratorRole_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "collaboratorId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["collaboratorId"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "role", ec.unmarshalNCollaboratorRole2lifequestᚑserverᚋgraphᚋmodelᚐCollaboratorRole)
	if err != nil {
		return nil, err
	}
	args["role"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFolder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateFolderInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateFolderInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePomodoroSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdatePomodoroSessionInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdatePomodoroSessionInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateProject_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateProjectInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateProjectInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateSprintInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateSprintInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateTask_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateTaskInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateTaskInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserPreferences_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateUserPreferencesInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateUserPreferencesInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "input", ec.unmarshalNUpdateUserInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateUserInput)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_folder_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notifications_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "unreadOnly", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["unreadOnly"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pomodoroSession_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pomodoroSessions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "date", ec.unmarshalOTime2ᚖtimeᚐTime)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_projectAnalytics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "projectId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_project_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sprintAnalytics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sprintId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["sprintId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sprint_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sprints_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalOSprintStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_task_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tasksByDueDate_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "date", ec.unmarshalNTime2timeᚐTime)
	if err != nil {
		return nil, err
	}
	args["date"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_tasks_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "status", ec.unmarshalOTaskStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskStatus)
	if err != nil {
		return nil, err
	}
	args["status"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "projectId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["projectId"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "sprintId", ec.unmarshalOID2ᚖstring)
	if err != nil {
		return nil, err
	}
	args["sprintId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_userAnalytics_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "startDate", ec.unmarshalNTime2timeᚐTime)
	if err != nil {
		return nil, err
	}
	args["startDate"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "endDate", ec.unmarshalNTime2timeᚐTime)
	if err != nil {
		return nil, err
	}
	args["endDate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_pomodoroSessionUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "userId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_sprintUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "sprintId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["sprintId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Subscription_taskUpdated_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "projectId", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["projectId"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Achievement_id(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_name(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_description(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_icon(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_progress(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_progress,
		func(ctx context.Context) (any, error) {
			return obj.Progress, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_progress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_maxProgress(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_maxProgress,
		func(ctx context.Context) (any, error) {
			return obj.MaxProgress, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_maxProgress(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_completed(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_completed,
		func(ctx context.Context) (any, error) {
			return obj.Completed, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_completed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_xpReward(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_xpReward,
		func(ctx context.Context) (any, error) {
			return obj.XpReward, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Achievement_xpReward(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_badgeReward(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_badgeReward,
		func(ctx context.Context) (any, error) {
			return obj.BadgeReward, nil
		},
		nil,
		ec.marshalOBadge2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBadge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Achievement_badgeReward(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "description":
				return ec.fieldContext_Badge_description(ctx, field)
			case "icon":
				return ec.fieldContext_Badge_icon(ctx, field)
			case "rarity":
				return ec.fieldContext_Badge_rarity(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_Badge_unlockedAt(ctx, field)
			case "criteria":
				return ec.fieldContext_Badge_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Achievement_unlockedAt(ctx context.Context, field graphql.CollectedField, obj *model.Achievement) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Achievement_unlockedAt,
		func(ctx context.Context) (any, error) {
			return obj.UnlockedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Achievement_unlockedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Achievement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_id(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_name(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_description(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_icon(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_rarity,
		func(ctx context.Context) (any, error) {
			return obj.Rarity, nil
		},
		nil,
		ec.marshalNBadgeRarity2lifequestᚑserverᚋgraphᚋmodelᚐBadgeRarity,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_rarity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BadgeRarity does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_unlockedAt(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_unlockedAt,
		func(ctx context.Context) (any, error) {
			return obj.UnlockedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_unlockedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Badge_criteria(ctx context.Context, field graphql.CollectedField, obj *model.Badge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Badge_criteria,
		func(ctx context.Context) (any, error) {
			return obj.Criteria, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Badge_criteria(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BurndownPoint_date(ctx context.Context, field graphql.CollectedField, obj *model.BurndownPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_BurndownPoint_date,
		func(ctx context.Context) (any, error) {
			return obj.Date, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_BurndownPoint_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BurndownPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BurndownPoint_remainingPoints(ctx context.Context, field graphql.CollectedField, obj *model.BurndownPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_BurndownPoint_remainingPoints,
		func(ctx context.Context) (any, error) {
			return obj.RemainingPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_BurndownPoint_remainingPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BurndownPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BurndownPoint_idealRemaining(ctx context.Context, field graphql.CollectedField, obj *model.BurndownPoint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_BurndownPoint_idealRemaining,
		func(ctx context.Context) (any, error) {
			return obj.IdealRemaining, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_BurndownPoint_idealRemaining(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BurndownPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_date(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_date,
		func(ctx context.Context) (any, error) {
			return obj.Date, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_tasksCompleted(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_tasksCompleted,
		func(ctx context.Context) (any, error) {
			return obj.TasksCompleted, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_tasksCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_xpEarned(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_xpEarned,
		func(ctx context.Context) (any, error) {
			return obj.XpEarned, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_xpEarned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_pomodoroSessions(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_pomodoroSessions,
		func(ctx context.Context) (any, error) {
			return obj.PomodoroSessions, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_pomodoroSessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_focusTime(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_focusTime,
		func(ctx context.Context) (any, error) {
			return obj.FocusTime, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_focusTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DailyStat_projectsWorkedOn(ctx context.Context, field graphql.CollectedField, obj *model.DailyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_DailyStat_projectsWorkedOn,
		func(ctx context.Context) (any, error) {
			return obj.ProjectsWorkedOn, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_DailyStat_projectsWorkedOn(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DailyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FocusAnalytics_averageSessionDuration(ctx context.Context, field graphql.CollectedField, obj *model.FocusAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FocusAnalytics_averageSessionDuration,
		func(ctx context.Context) (any, error) {
			return obj.AverageSessionDuration, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FocusAnalytics_averageSessionDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FocusAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FocusAnalytics_totalFocusTime(ctx context.Context, field graphql.CollectedField, obj *model.FocusAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FocusAnalytics_totalFocusTime,
		func(ctx context.Context) (any, error) {
			return obj.TotalFocusTime, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FocusAnalytics_totalFocusTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FocusAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FocusAnalytics_focusStreakDays(ctx context.Context, field graphql.CollectedField, obj *model.FocusAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FocusAnalytics_focusStreakDays,
		func(ctx context.Context) (any, error) {
			return obj.FocusStreakDays, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FocusAnalytics_focusStreakDays(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FocusAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FocusAnalytics_preferredFocusTime(ctx context.Context, field graphql.CollectedField, obj *model.FocusAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FocusAnalytics_preferredFocusTime,
		func(ctx context.Context) (any, error) {
			return obj.PreferredFocusTime, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FocusAnalytics_preferredFocusTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FocusAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FocusAnalytics_focusEfficiency(ctx context.Context, field graphql.CollectedField, obj *model.FocusAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FocusAnalytics_focusEfficiency,
		func(ctx context.Context) (any, error) {
			return obj.FocusEfficiency, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FocusAnalytics_focusEfficiency(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FocusAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_id(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_name(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_description(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_color(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_color,
		func(ctx context.Context) (any, error) {
			return obj.Color, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_color(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_icon(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_isArchived(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_isArchived,
		func(ctx context.Context) (any, error) {
			return obj.IsArchived, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_isArchived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_userId(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_parentId(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_parentId,
		func(ctx context.Context) (any, error) {
			return obj.ParentID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Folder_parentId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_children(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_children,
		func(ctx context.Context) (any, error) {
			return obj.Children, nil
		},
		nil,
		ec.marshalNFolder2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐFolderᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_children(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_projects(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_projects,
		func(ctx context.Context) (any, error) {
			return obj.Projects, nil
		},
		nil,
		ec.marshalNProject2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_projects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Folder_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Folder) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Folder_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Folder_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Folder",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_month(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_month,
		func(ctx context.Context) (any, error) {
			return obj.Month, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_year(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_year,
		func(ctx context.Context) (any, error) {
			return obj.Year, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_tasksCompleted(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_tasksCompleted,
		func(ctx context.Context) (any, error) {
			return obj.TasksCompleted, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_tasksCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_xpEarned(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_xpEarned,
		func(ctx context.Context) (any, error) {
			return obj.XpEarned, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_xpEarned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_pomodoroSessions(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_pomodoroSessions,
		func(ctx context.Context) (any, error) {
			return obj.PomodoroSessions, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_pomodoroSessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_focusTime(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_focusTime,
		func(ctx context.Context) (any, error) {
			return obj.FocusTime, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_focusTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MonthlyStat_goalsAchieved(ctx context.Context, field graphql.CollectedField, obj *model.MonthlyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MonthlyStat_goalsAchieved,
		func(ctx context.Context) (any, error) {
			return obj.GoalsAchieved, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MonthlyStat_goalsAchieved(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MonthlyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateUser(ctx, fc.Args["input"].(model.CreateUserInput))
		},
		nil,
		ec.marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateUser,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateUser(ctx, fc.Args["input"].(model.UpdateUserInput))
		},
		nil,
		ec.marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateUserPreferences(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateUserPreferences,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateUserPreferences(ctx, fc.Args["input"].(model.UpdateUserPreferencesInput))
		},
		nil,
		ec.marshalNUserPreferences2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserPreferences,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateUserPreferences(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserPreferences_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserPreferences_userId(ctx, field)
			case "theme":
				return ec.fieldContext_UserPreferences_theme(ctx, field)
			case "notifications":
				return ec.fieldContext_UserPreferences_notifications(ctx, field)
			case "pomodoroSettings":
				return ec.fieldContext_UserPreferences_pomodoroSettings(ctx, field)
			case "timezone":
				return ec.fieldContext_UserPreferences_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreferences", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateUserPreferences_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateFolder(ctx, fc.Args["input"].(model.CreateFolderInput))
		},
		nil,
		ec.marshalNFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateFolder(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateFolderInput))
		},
		nil,
		ec.marshalNFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteFolder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteFolder(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateProject(ctx, fc.Args["input"].(model.CreateProjectInput))
		},
		nil,
		ec.marshalNProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateProject(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateProjectInput))
		},
		nil,
		ec.marshalNProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteProject,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteProject(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteProject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteProject_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createTask,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateTask(ctx, fc.Args["input"].(model.CreateTaskInput))
		},
		nil,
		ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateTask,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateTask(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateTaskInput))
		},
		nil,
		ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteTask(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteTask,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteTask(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteTask(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteTask_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_toggleTaskStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_toggleTaskStatus,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().ToggleTaskStatus(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_toggleTaskStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_toggleTaskStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_createSprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CreateSprint(ctx, fc.Args["input"].(model.CreateSprintInput))
		},
		nil,
		ec.marshalNSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_createSprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateSprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateSprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateSprint(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdateSprintInput))
		},
		nil,
		ec.marshalNSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateSprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateSprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_deleteSprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().DeleteSprint(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_deleteSprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addTaskToSprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_addTaskToSprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().AddTaskToSprint(ctx, fc.Args["sprintId"].(string), fc.Args["taskId"].(string), fc.Args["storyPoints"].(int))
		},
		nil,
		ec.marshalNSprintTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_addTaskToSprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SprintTask_id(ctx, field)
			case "sprintId":
				return ec.fieldContext_SprintTask_sprintId(ctx, field)
			case "taskId":
				return ec.fieldContext_SprintTask_taskId(ctx, field)
			case "task":
				return ec.fieldContext_SprintTask_task(ctx, field)
			case "storyPoints":
				return ec.fieldContext_SprintTask_storyPoints(ctx, field)
			case "assignedAt":
				return ec.fieldContext_SprintTask_assignedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SprintTask", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addTaskToSprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeTaskFromSprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_removeTaskFromSprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RemoveTaskFromSprint(ctx, fc.Args["sprintId"].(string), fc.Args["taskId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_removeTaskFromSprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeTaskFromSprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_startPomodoroSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_startPomodoroSession,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().StartPomodoroSession(ctx, fc.Args["input"].(model.CreatePomodoroSessionInput))
		},
		nil,
		ec.marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_startPomodoroSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_startPomodoroSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePomodoroSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updatePomodoroSession,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdatePomodoroSession(ctx, fc.Args["id"].(string), fc.Args["input"].(model.UpdatePomodoroSessionInput))
		},
		nil,
		ec.marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updatePomodoroSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePomodoroSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_completePomodoroSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_completePomodoroSession,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().CompletePomodoroSession(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_completePomodoroSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_completePomodoroSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markNotificationAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markNotificationAsRead,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().MarkNotificationAsRead(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalNNotification2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markNotificationAsRead(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "read":
				return ec.fieldContext_Notification_read(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "data":
				return ec.fieldContext_Notification_data(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_markNotificationAsRead_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_markAllNotificationsAsRead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_markAllNotificationsAsRead,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Mutation().MarkAllNotificationsAsRead(ctx)
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_markAllNotificationsAsRead(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_inviteCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_inviteCollaborator,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().InviteCollaborator(ctx, fc.Args["projectId"].(string), fc.Args["email"].(string), fc.Args["role"].(model.CollaboratorRole))
		},
		nil,
		ec.marshalNProjectCollaborator2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaborator,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_inviteCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectCollaborator_id(ctx, field)
			case "projectId":
				return ec.fieldContext_ProjectCollaborator_projectId(ctx, field)
			case "userId":
				return ec.fieldContext_ProjectCollaborator_userId(ctx, field)
			case "user":
				return ec.fieldContext_ProjectCollaborator_user(ctx, field)
			case "role":
				return ec.fieldContext_ProjectCollaborator_role(ctx, field)
			case "invitedAt":
				return ec.fieldContext_ProjectCollaborator_invitedAt(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ProjectCollaborator_joinedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_inviteCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCollaboratorRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_updateCollaboratorRole,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().UpdateCollaboratorRole(ctx, fc.Args["collaboratorId"].(string), fc.Args["role"].(model.CollaboratorRole))
		},
		nil,
		ec.marshalNProjectCollaborator2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaborator,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_updateCollaboratorRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectCollaborator_id(ctx, field)
			case "projectId":
				return ec.fieldContext_ProjectCollaborator_projectId(ctx, field)
			case "userId":
				return ec.fieldContext_ProjectCollaborator_userId(ctx, field)
			case "user":
				return ec.fieldContext_ProjectCollaborator_user(ctx, field)
			case "role":
				return ec.fieldContext_ProjectCollaborator_role(ctx, field)
			case "invitedAt":
				return ec.fieldContext_ProjectCollaborator_invitedAt(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ProjectCollaborator_joinedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectCollaborator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCollaboratorRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeCollaborator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Mutation_removeCollaborator,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Mutation().RemoveCollaborator(ctx, fc.Args["collaboratorId"].(string))
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Mutation_removeCollaborator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeCollaborator_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Notification_id(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_title(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_message(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_message,
		func(ctx context.Context) (any, error) {
			return obj.Message, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_message(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_type(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNNotificationType2lifequestᚑserverᚋgraphᚋmodelᚐNotificationType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NotificationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_read(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_read,
		func(ctx context.Context) (any, error) {
			return obj.Read, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_read(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_userId(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_data(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Notification_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Notification_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Notification) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Notification_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Notification_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Notification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationSettings_email(ctx context.Context, field graphql.CollectedField, obj *model.NotificationSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_NotificationSettings_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_NotificationSettings_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationSettings_push(ctx context.Context, field graphql.CollectedField, obj *model.NotificationSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_NotificationSettings_push,
		func(ctx context.Context) (any, error) {
			return obj.Push, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_NotificationSettings_push(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationSettings_sessionReminders(ctx context.Context, field graphql.CollectedField, obj *model.NotificationSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_NotificationSettings_sessionReminders,
		func(ctx context.Context) (any, error) {
			return obj.SessionReminders, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_NotificationSettings_sessionReminders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationSettings_dailyGoals(ctx context.Context, field graphql.CollectedField, obj *model.NotificationSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_NotificationSettings_dailyGoals,
		func(ctx context.Context) (any, error) {
			return obj.DailyGoals, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_NotificationSettings_dailyGoals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationSettings_weeklyReports(ctx context.Context, field graphql.CollectedField, obj *model.NotificationSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_NotificationSettings_weeklyReports,
		func(ctx context.Context) (any, error) {
			return obj.WeeklyReports, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_NotificationSettings_weeklyReports(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_id(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_duration(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_duration,
		func(ctx context.Context) (any, error) {
			return obj.Duration, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_duration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_completed(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_completed,
		func(ctx context.Context) (any, error) {
			return obj.Completed, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_completed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_startTime(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_startTime,
		func(ctx context.Context) (any, error) {
			return obj.StartTime, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_startTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_endTime(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_endTime,
		func(ctx context.Context) (any, error) {
			return obj.EndTime, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_endTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_breakDuration(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_breakDuration,
		func(ctx context.Context) (any, error) {
			return obj.BreakDuration, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_breakDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_userId(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_taskId(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_taskId,
		func(ctx context.Context) (any, error) {
			return obj.TaskID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_taskId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_task(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_task,
		func(ctx context.Context) (any, error) {
			return obj.Task, nil
		},
		nil,
		ec.marshalOTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_task(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_sessionType(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_sessionType,
		func(ctx context.Context) (any, error) {
			return obj.SessionType, nil
		},
		nil,
		ec.marshalNSessionType2lifequestᚑserverᚋgraphᚋmodelᚐSessionType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_sessionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SessionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_interruptions(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_interruptions,
		func(ctx context.Context) (any, error) {
			return obj.Interruptions, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_interruptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_notes(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_focusScore(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_focusScore,
		func(ctx context.Context) (any, error) {
			return obj.FocusScore, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_focusScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSession_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSession) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSession_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSession_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSession",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_workDuration(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_workDuration,
		func(ctx context.Context) (any, error) {
			return obj.WorkDuration, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_workDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_shortBreakDuration(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_shortBreakDuration,
		func(ctx context.Context) (any, error) {
			return obj.ShortBreakDuration, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_shortBreakDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_longBreakDuration(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_longBreakDuration,
		func(ctx context.Context) (any, error) {
			return obj.LongBreakDuration, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_longBreakDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_sessionsUntilLongBreak(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_sessionsUntilLongBreak,
		func(ctx context.Context) (any, error) {
			return obj.SessionsUntilLongBreak, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_sessionsUntilLongBreak(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_autoStartBreaks(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_autoStartBreaks,
		func(ctx context.Context) (any, error) {
			return obj.AutoStartBreaks, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_autoStartBreaks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PomodoroSettings_autoStartWork(ctx context.Context, field graphql.CollectedField, obj *model.PomodoroSettings) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PomodoroSettings_autoStartWork,
		func(ctx context.Context) (any, error) {
			return obj.AutoStartWork, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PomodoroSettings_autoStartWork(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PomodoroSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductivityAnalytics_averageTasksPerDay(ctx context.Context, field graphql.CollectedField, obj *model.ProductivityAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProductivityAnalytics_averageTasksPerDay,
		func(ctx context.Context) (any, error) {
			return obj.AverageTasksPerDay, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProductivityAnalytics_averageTasksPerDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductivityAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductivityAnalytics_peakProductivityHour(ctx context.Context, field graphql.CollectedField, obj *model.ProductivityAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProductivityAnalytics_peakProductivityHour,
		func(ctx context.Context) (any, error) {
			return obj.PeakProductivityHour, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProductivityAnalytics_peakProductivityHour(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductivityAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductivityAnalytics_mostProductiveDay(ctx context.Context, field graphql.CollectedField, obj *model.ProductivityAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProductivityAnalytics_mostProductiveDay,
		func(ctx context.Context) (any, error) {
			return obj.MostProductiveDay, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProductivityAnalytics_mostProductiveDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductivityAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductivityAnalytics_taskCompletionRate(ctx context.Context, field graphql.CollectedField, obj *model.ProductivityAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProductivityAnalytics_taskCompletionRate,
		func(ctx context.Context) (any, error) {
			return obj.TaskCompletionRate, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProductivityAnalytics_taskCompletionRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductivityAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductivityAnalytics_averageTaskDuration(ctx context.Context, field graphql.CollectedField, obj *model.ProductivityAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProductivityAnalytics_averageTaskDuration,
		func(ctx context.Context) (any, error) {
			return obj.AverageTaskDuration, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProductivityAnalytics_averageTaskDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductivityAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_id(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_name(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_description(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_color(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_color,
		func(ctx context.Context) (any, error) {
			return obj.Color, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_color(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_icon(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_status(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNProjectStatus2lifequestᚑserverᚋgraphᚋmodelᚐProjectStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ProjectStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_priority(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_priority,
		func(ctx context.Context) (any, error) {
			return obj.Priority, nil
		},
		nil,
		ec.marshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Priority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_startDate,
		func(ctx context.Context) (any, error) {
			return obj.StartDate, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_endDate(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_endDate,
		func(ctx context.Context) (any, error) {
			return obj.EndDate, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_isArchived(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_isArchived,
		func(ctx context.Context) (any, error) {
			return obj.IsArchived, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_isArchived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_userId(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_folderId(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_folderId,
		func(ctx context.Context) (any, error) {
			return obj.FolderID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_folderId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_folder(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_folder,
		func(ctx context.Context) (any, error) {
			return obj.Folder, nil
		},
		nil,
		ec.marshalOFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Project_folder(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_tasks(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_tasks,
		func(ctx context.Context) (any, error) {
			return obj.Tasks, nil
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_sprints(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_sprints,
		func(ctx context.Context) (any, error) {
			return obj.Sprints, nil
		},
		nil,
		ec.marshalNSprint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_sprints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_collaborators(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_collaborators,
		func(ctx context.Context) (any, error) {
			return obj.Collaborators, nil
		},
		nil,
		ec.marshalNProjectCollaborator2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaboratorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_collaborators(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProjectCollaborator_id(ctx, field)
			case "projectId":
				return ec.fieldContext_ProjectCollaborator_projectId(ctx, field)
			case "userId":
				return ec.fieldContext_ProjectCollaborator_userId(ctx, field)
			case "user":
				return ec.fieldContext_ProjectCollaborator_user(ctx, field)
			case "role":
				return ec.fieldContext_ProjectCollaborator_role(ctx, field)
			case "invitedAt":
				return ec.fieldContext_ProjectCollaborator_invitedAt(ctx, field)
			case "joinedAt":
				return ec.fieldContext_ProjectCollaborator_joinedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectCollaborator", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_analytics(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_analytics,
		func(ctx context.Context) (any, error) {
			return obj.Analytics, nil
		},
		nil,
		ec.marshalNProjectAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_analytics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalTasks":
				return ec.fieldContext_ProjectAnalytics_totalTasks(ctx, field)
			case "completedTasks":
				return ec.fieldContext_ProjectAnalytics_completedTasks(ctx, field)
			case "overdueTasks":
				return ec.fieldContext_ProjectAnalytics_overdueTasks(ctx, field)
			case "averageTaskDuration":
				return ec.fieldContext_ProjectAnalytics_averageTaskDuration(ctx, field)
			case "completionRate":
				return ec.fieldContext_ProjectAnalytics_completionRate(ctx, field)
			case "timeSpent":
				return ec.fieldContext_ProjectAnalytics_timeSpent(ctx, field)
			case "xpEarned":
				return ec.fieldContext_ProjectAnalytics_xpEarned(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectAnalytics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Project_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Project) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Project_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Project_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Project",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_totalTasks(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_totalTasks,
		func(ctx context.Context) (any, error) {
			return obj.TotalTasks, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_totalTasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_completedTasks(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_completedTasks,
		func(ctx context.Context) (any, error) {
			return obj.CompletedTasks, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_completedTasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_overdueTasks(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_overdueTasks,
		func(ctx context.Context) (any, error) {
			return obj.OverdueTasks, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_overdueTasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_averageTaskDuration(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_averageTaskDuration,
		func(ctx context.Context) (any, error) {
			return obj.AverageTaskDuration, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_averageTaskDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_completionRate(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_completionRate,
		func(ctx context.Context) (any, error) {
			return obj.CompletionRate, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_completionRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_timeSpent(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_timeSpent,
		func(ctx context.Context) (any, error) {
			return obj.TimeSpent, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_timeSpent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectAnalytics_xpEarned(ctx context.Context, field graphql.CollectedField, obj *model.ProjectAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectAnalytics_xpEarned,
		func(ctx context.Context) (any, error) {
			return obj.XpEarned, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectAnalytics_xpEarned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_id(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_projectId(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_projectId,
		func(ctx context.Context) (any, error) {
			return obj.ProjectID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_projectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_userId(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_user(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_user,
		func(ctx context.Context) (any, error) {
			return obj.User, nil
		},
		nil,
		ec.marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_role(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_role,
		func(ctx context.Context) (any, error) {
			return obj.Role, nil
		},
		nil,
		ec.marshalNCollaboratorRole2lifequestᚑserverᚋgraphᚋmodelᚐCollaboratorRole,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_role(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CollaboratorRole does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_invitedAt(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_invitedAt,
		func(ctx context.Context) (any, error) {
			return obj.InvitedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_invitedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProjectCollaborator_joinedAt(ctx context.Context, field graphql.CollectedField, obj *model.ProjectCollaborator) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ProjectCollaborator_joinedAt,
		func(ctx context.Context) (any, error) {
			return obj.JoinedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ProjectCollaborator_joinedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProjectCollaborator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_me,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Me(ctx)
		},
		nil,
		ec.marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_me(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_user,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().User(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_user_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_folders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folders,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Folders(ctx)
		},
		nil,
		ec.marshalNFolder2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐFolderᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_folders(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_folder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_folder,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Folder(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_folder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Folder_id(ctx, field)
			case "name":
				return ec.fieldContext_Folder_name(ctx, field)
			case "description":
				return ec.fieldContext_Folder_description(ctx, field)
			case "color":
				return ec.fieldContext_Folder_color(ctx, field)
			case "icon":
				return ec.fieldContext_Folder_icon(ctx, field)
			case "isArchived":
				return ec.fieldContext_Folder_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Folder_userId(ctx, field)
			case "parentId":
				return ec.fieldContext_Folder_parentId(ctx, field)
			case "children":
				return ec.fieldContext_Folder_children(ctx, field)
			case "projects":
				return ec.fieldContext_Folder_projects(ctx, field)
			case "createdAt":
				return ec.fieldContext_Folder_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Folder_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Folder", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_folder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_projects,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Projects(ctx)
		},
		nil,
		ec.marshalNProject2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_projects(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_project(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_project,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Project(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_project(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_project_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tasks,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tasks(ctx, fc.Args["status"].(*model.TaskStatus), fc.Args["projectId"].(*string), fc.Args["sprintId"].(*string))
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_tasks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tasks_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_task(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_task,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Task(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_task(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_task_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tasksByDueDate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tasksByDueDate,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().TasksByDueDate(ctx, fc.Args["date"].(time.Time))
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_tasksByDueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tasksByDueDate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_overdueTasks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_overdueTasks,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().OverdueTasks(ctx)
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_overdueTasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_sprints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_sprints,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Sprints(ctx, fc.Args["status"].(*model.SprintStatus))
		},
		nil,
		ec.marshalNSprint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_sprints(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sprints_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_sprint(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_sprint,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Sprint(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_sprint(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sprint_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_activeSprints(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_activeSprints,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().ActiveSprints(ctx)
		},
		nil,
		ec.marshalNSprint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_activeSprints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_pomodoroSessions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_pomodoroSessions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().PomodoroSessions(ctx, fc.Args["date"].(*time.Time))
		},
		nil,
		ec.marshalNPomodoroSession2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSessionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_pomodoroSessions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pomodoroSessions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_pomodoroSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_pomodoroSession,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().PomodoroSession(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalOPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_pomodoroSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pomodoroSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_todaysSessions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_todaysSessions,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().TodaysSessions(ctx)
		},
		nil,
		ec.marshalNPomodoroSession2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSessionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_todaysSessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userAnalytics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_userAnalytics,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().UserAnalytics(ctx, fc.Args["startDate"].(time.Time), fc.Args["endDate"].(time.Time))
		},
		nil,
		ec.marshalNUserAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_userAnalytics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAnalytics_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserAnalytics_userId(ctx, field)
			case "dailyStats":
				return ec.fieldContext_UserAnalytics_dailyStats(ctx, field)
			case "weeklyStats":
				return ec.fieldContext_UserAnalytics_weeklyStats(ctx, field)
			case "monthlyStats":
				return ec.fieldContext_UserAnalytics_monthlyStats(ctx, field)
			case "productivity":
				return ec.fieldContext_UserAnalytics_productivity(ctx, field)
			case "focus":
				return ec.fieldContext_UserAnalytics_focus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAnalytics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userAnalytics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_projectAnalytics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_projectAnalytics,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().ProjectAnalytics(ctx, fc.Args["projectId"].(string))
		},
		nil,
		ec.marshalNProjectAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_projectAnalytics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalTasks":
				return ec.fieldContext_ProjectAnalytics_totalTasks(ctx, field)
			case "completedTasks":
				return ec.fieldContext_ProjectAnalytics_completedTasks(ctx, field)
			case "overdueTasks":
				return ec.fieldContext_ProjectAnalytics_overdueTasks(ctx, field)
			case "averageTaskDuration":
				return ec.fieldContext_ProjectAnalytics_averageTaskDuration(ctx, field)
			case "completionRate":
				return ec.fieldContext_ProjectAnalytics_completionRate(ctx, field)
			case "timeSpent":
				return ec.fieldContext_ProjectAnalytics_timeSpent(ctx, field)
			case "xpEarned":
				return ec.fieldContext_ProjectAnalytics_xpEarned(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProjectAnalytics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_projectAnalytics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_sprintAnalytics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_sprintAnalytics,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().SprintAnalytics(ctx, fc.Args["sprintId"].(string))
		},
		nil,
		ec.marshalNSprintAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_sprintAnalytics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plannedStoryPoints":
				return ec.fieldContext_SprintAnalytics_plannedStoryPoints(ctx, field)
			case "completedStoryPoints":
				return ec.fieldContext_SprintAnalytics_completedStoryPoints(ctx, field)
			case "burndownData":
				return ec.fieldContext_SprintAnalytics_burndownData(ctx, field)
			case "velocityTrend":
				return ec.fieldContext_SprintAnalytics_velocityTrend(ctx, field)
			case "completionRate":
				return ec.fieldContext_SprintAnalytics_completionRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SprintAnalytics", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sprintAnalytics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_achievements(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_achievements,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Achievements(ctx)
		},
		nil,
		ec.marshalNAchievement2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐAchievementᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_achievements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Achievement_id(ctx, field)
			case "name":
				return ec.fieldContext_Achievement_name(ctx, field)
			case "description":
				return ec.fieldContext_Achievement_description(ctx, field)
			case "icon":
				return ec.fieldContext_Achievement_icon(ctx, field)
			case "progress":
				return ec.fieldContext_Achievement_progress(ctx, field)
			case "maxProgress":
				return ec.fieldContext_Achievement_maxProgress(ctx, field)
			case "completed":
				return ec.fieldContext_Achievement_completed(ctx, field)
			case "xpReward":
				return ec.fieldContext_Achievement_xpReward(ctx, field)
			case "badgeReward":
				return ec.fieldContext_Achievement_badgeReward(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_Achievement_unlockedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Achievement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_badges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_badges,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().Badges(ctx)
		},
		nil,
		ec.marshalNBadge2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐBadgeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_badges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "description":
				return ec.fieldContext_Badge_description(ctx, field)
			case "icon":
				return ec.fieldContext_Badge_icon(ctx, field)
			case "rarity":
				return ec.fieldContext_Badge_rarity(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_Badge_unlockedAt(ctx, field)
			case "criteria":
				return ec.fieldContext_Badge_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_skillTrees(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_skillTrees,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().SkillTrees(ctx)
		},
		nil,
		ec.marshalNSkillTree2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillTreeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_skillTrees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillTree_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillTree_name(ctx, field)
			case "category":
				return ec.fieldContext_SkillTree_category(ctx, field)
			case "totalXp":
				return ec.fieldContext_SkillTree_totalXp(ctx, field)
			case "level":
				return ec.fieldContext_SkillTree_level(ctx, field)
			case "skills":
				return ec.fieldContext_SkillTree_skills(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_SkillTree_unlockedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTree", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_notifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_notifications,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Notifications(ctx, fc.Args["unreadOnly"].(*bool))
		},
		nil,
		ec.marshalNNotification2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_notifications(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "read":
				return ec.fieldContext_Notification_read(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "data":
				return ec.fieldContext_Notification_data(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_notifications_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_unreadNotificationCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_unreadNotificationCount,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().UnreadNotificationCount(ctx)
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_unreadNotificationCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_id(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_name(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_description(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_icon(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_icon,
		func(ctx context.Context) (any, error) {
			return obj.Icon, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_icon(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_requiredXp(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_requiredXp,
		func(ctx context.Context) (any, error) {
			return obj.RequiredXp, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_requiredXp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_unlocked(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_unlocked,
		func(ctx context.Context) (any, error) {
			return obj.Unlocked, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_unlocked(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_level(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_maxLevel(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_maxLevel,
		func(ctx context.Context) (any, error) {
			return obj.MaxLevel, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_maxLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Skill_category(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Skill_category,
		func(ctx context.Context) (any, error) {
			return obj.Category, nil
		},
		nil,
		ec.marshalNSkillCategory2lifequestᚑserverᚋgraphᚋmodelᚐSkillCategory,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Skill_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SkillCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_id(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_name(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_category(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_category,
		func(ctx context.Context) (any, error) {
			return obj.Category, nil
		},
		nil,
		ec.marshalNSkillCategory2lifequestᚑserverᚋgraphᚋmodelᚐSkillCategory,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_category(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SkillCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_totalXp(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_totalXp,
		func(ctx context.Context) (any, error) {
			return obj.TotalXp, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_totalXp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_level(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_skills(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_skills,
		func(ctx context.Context) (any, error) {
			return obj.Skills, nil
		},
		nil,
		ec.marshalNSkill2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SkillTree_skills(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Skill_id(ctx, field)
			case "name":
				return ec.fieldContext_Skill_name(ctx, field)
			case "description":
				return ec.fieldContext_Skill_description(ctx, field)
			case "icon":
				return ec.fieldContext_Skill_icon(ctx, field)
			case "requiredXp":
				return ec.fieldContext_Skill_requiredXp(ctx, field)
			case "unlocked":
				return ec.fieldContext_Skill_unlocked(ctx, field)
			case "level":
				return ec.fieldContext_Skill_level(ctx, field)
			case "maxLevel":
				return ec.fieldContext_Skill_maxLevel(ctx, field)
			case "category":
				return ec.fieldContext_Skill_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Skill", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SkillTree_unlockedAt(ctx context.Context, field graphql.CollectedField, obj *model.SkillTree) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SkillTree_unlockedAt,
		func(ctx context.Context) (any, error) {
			return obj.UnlockedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SkillTree_unlockedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SkillTree",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_id(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_name(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_description(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sprint_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_goal(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_goal,
		func(ctx context.Context) (any, error) {
			return obj.Goal, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sprint_goal(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_status(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNSprintStatus2lifequestᚑserverᚋgraphᚋmodelᚐSprintStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SprintStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_startDate(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_startDate,
		func(ctx context.Context) (any, error) {
			return obj.StartDate, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_startDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_endDate(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_endDate,
		func(ctx context.Context) (any, error) {
			return obj.EndDate, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_endDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_velocity(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_velocity,
		func(ctx context.Context) (any, error) {
			return obj.Velocity, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_velocity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_userId(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_projectId(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_projectId,
		func(ctx context.Context) (any, error) {
			return obj.ProjectID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sprint_projectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_project(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_project,
		func(ctx context.Context) (any, error) {
			return obj.Project, nil
		},
		nil,
		ec.marshalOProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Sprint_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_tasks(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_tasks,
		func(ctx context.Context) (any, error) {
			return obj.Tasks, nil
		},
		nil,
		ec.marshalNSprintTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_tasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SprintTask_id(ctx, field)
			case "sprintId":
				return ec.fieldContext_SprintTask_sprintId(ctx, field)
			case "taskId":
				return ec.fieldContext_SprintTask_taskId(ctx, field)
			case "task":
				return ec.fieldContext_SprintTask_task(ctx, field)
			case "storyPoints":
				return ec.fieldContext_SprintTask_storyPoints(ctx, field)
			case "assignedAt":
				return ec.fieldContext_SprintTask_assignedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SprintTask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_analytics(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_analytics,
		func(ctx context.Context) (any, error) {
			return obj.Analytics, nil
		},
		nil,
		ec.marshalNSprintAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_analytics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "plannedStoryPoints":
				return ec.fieldContext_SprintAnalytics_plannedStoryPoints(ctx, field)
			case "completedStoryPoints":
				return ec.fieldContext_SprintAnalytics_completedStoryPoints(ctx, field)
			case "burndownData":
				return ec.fieldContext_SprintAnalytics_burndownData(ctx, field)
			case "velocityTrend":
				return ec.fieldContext_SprintAnalytics_velocityTrend(ctx, field)
			case "completionRate":
				return ec.fieldContext_SprintAnalytics_completionRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SprintAnalytics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Sprint_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Sprint) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Sprint_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Sprint_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Sprint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintAnalytics_plannedStoryPoints(ctx context.Context, field graphql.CollectedField, obj *model.SprintAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintAnalytics_plannedStoryPoints,
		func(ctx context.Context) (any, error) {
			return obj.PlannedStoryPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintAnalytics_plannedStoryPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintAnalytics_completedStoryPoints(ctx context.Context, field graphql.CollectedField, obj *model.SprintAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintAnalytics_completedStoryPoints,
		func(ctx context.Context) (any, error) {
			return obj.CompletedStoryPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintAnalytics_completedStoryPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintAnalytics_burndownData(ctx context.Context, field graphql.CollectedField, obj *model.SprintAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintAnalytics_burndownData,
		func(ctx context.Context) (any, error) {
			return obj.BurndownData, nil
		},
		nil,
		ec.marshalNBurndownPoint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐBurndownPointᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintAnalytics_burndownData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_BurndownPoint_date(ctx, field)
			case "remainingPoints":
				return ec.fieldContext_BurndownPoint_remainingPoints(ctx, field)
			case "idealRemaining":
				return ec.fieldContext_BurndownPoint_idealRemaining(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BurndownPoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintAnalytics_velocityTrend(ctx context.Context, field graphql.CollectedField, obj *model.SprintAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintAnalytics_velocityTrend,
		func(ctx context.Context) (any, error) {
			return obj.VelocityTrend, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintAnalytics_velocityTrend(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintAnalytics_completionRate(ctx context.Context, field graphql.CollectedField, obj *model.SprintAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintAnalytics_completionRate,
		func(ctx context.Context) (any, error) {
			return obj.CompletionRate, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintAnalytics_completionRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_id(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_sprintId(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_sprintId,
		func(ctx context.Context) (any, error) {
			return obj.SprintID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_sprintId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_taskId(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_taskId,
		func(ctx context.Context) (any, error) {
			return obj.TaskID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_taskId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_task(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_task,
		func(ctx context.Context) (any, error) {
			return obj.Task, nil
		},
		nil,
		ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_task(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_storyPoints(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_storyPoints,
		func(ctx context.Context) (any, error) {
			return obj.StoryPoints, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_storyPoints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SprintTask_assignedAt(ctx context.Context, field graphql.CollectedField, obj *model.SprintTask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SprintTask_assignedAt,
		func(ctx context.Context) (any, error) {
			return obj.AssignedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SprintTask_assignedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SprintTask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_notificationAdded(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_notificationAdded,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Subscription().NotificationAdded(ctx)
		},
		nil,
		ec.marshalNNotification2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotification,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_notificationAdded(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Notification_id(ctx, field)
			case "title":
				return ec.fieldContext_Notification_title(ctx, field)
			case "message":
				return ec.fieldContext_Notification_message(ctx, field)
			case "type":
				return ec.fieldContext_Notification_type(ctx, field)
			case "read":
				return ec.fieldContext_Notification_read(ctx, field)
			case "userId":
				return ec.fieldContext_Notification_userId(ctx, field)
			case "data":
				return ec.fieldContext_Notification_data(ctx, field)
			case "createdAt":
				return ec.fieldContext_Notification_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Notification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_pomodoroSessionUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_pomodoroSessionUpdated,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().PomodoroSessionUpdated(ctx, fc.Args["userId"].(string))
		},
		nil,
		ec.marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_pomodoroSessionUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_pomodoroSessionUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_taskUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_taskUpdated,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().TaskUpdated(ctx, fc.Args["projectId"].(string))
		},
		nil,
		ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_taskUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_taskUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subscription_sprintUpdated(ctx context.Context, field graphql.CollectedField) (ret func(ctx context.Context) graphql.Marshaler) {
	return graphql.ResolveFieldStream(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subscription_sprintUpdated,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Subscription().SprintUpdated(ctx, fc.Args["sprintId"].(string))
		},
		nil,
		ec.marshalNSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subscription_sprintUpdated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Subscription_sprintUpdated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Subtask_id(ctx context.Context, field graphql.CollectedField, obj *model.Subtask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subtask_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subtask_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subtask_title(ctx context.Context, field graphql.CollectedField, obj *model.Subtask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subtask_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subtask_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subtask_completed(ctx context.Context, field graphql.CollectedField, obj *model.Subtask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subtask_completed,
		func(ctx context.Context) (any, error) {
			return obj.Completed, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subtask_completed(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subtask_taskId(ctx context.Context, field graphql.CollectedField, obj *model.Subtask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subtask_taskId,
		func(ctx context.Context) (any, error) {
			return obj.TaskID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subtask_taskId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Subtask_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Subtask) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Subtask_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Subtask_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Subtask",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_id(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_title(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_description(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_description,
		func(ctx context.Context) (any, error) {
			return obj.Description, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_status(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNTaskStatus2lifequestᚑserverᚋgraphᚋmodelᚐTaskStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TaskStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_priority(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_priority,
		func(ctx context.Context) (any, error) {
			return obj.Priority, nil
		},
		nil,
		ec.marshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Priority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_xpValue(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_xpValue,
		func(ctx context.Context) (any, error) {
			return obj.XpValue, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_xpValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_estimatedDuration(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_estimatedDuration,
		func(ctx context.Context) (any, error) {
			return obj.EstimatedDuration, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_estimatedDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_actualDuration(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_actualDuration,
		func(ctx context.Context) (any, error) {
			return obj.ActualDuration, nil
		},
		nil,
		ec.marshalOInt2ᚖint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_actualDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_tags(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_tags,
		func(ctx context.Context) (any, error) {
			return obj.Tags, nil
		},
		nil,
		ec.marshalNString2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_tags(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_dueDate(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_dueDate,
		func(ctx context.Context) (any, error) {
			return obj.DueDate, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_dueDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_completedAt(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_completedAt,
		func(ctx context.Context) (any, error) {
			return obj.CompletedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_completedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_isArchived(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_isArchived,
		func(ctx context.Context) (any, error) {
			return obj.IsArchived, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_isArchived(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_userId(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_projectId(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_projectId,
		func(ctx context.Context) (any, error) {
			return obj.ProjectID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_projectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_project(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_project,
		func(ctx context.Context) (any, error) {
			return obj.Project, nil
		},
		nil,
		ec.marshalOProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_project(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Project_id(ctx, field)
			case "name":
				return ec.fieldContext_Project_name(ctx, field)
			case "description":
				return ec.fieldContext_Project_description(ctx, field)
			case "color":
				return ec.fieldContext_Project_color(ctx, field)
			case "icon":
				return ec.fieldContext_Project_icon(ctx, field)
			case "status":
				return ec.fieldContext_Project_status(ctx, field)
			case "priority":
				return ec.fieldContext_Project_priority(ctx, field)
			case "startDate":
				return ec.fieldContext_Project_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Project_endDate(ctx, field)
			case "isArchived":
				return ec.fieldContext_Project_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Project_userId(ctx, field)
			case "folderId":
				return ec.fieldContext_Project_folderId(ctx, field)
			case "folder":
				return ec.fieldContext_Project_folder(ctx, field)
			case "tasks":
				return ec.fieldContext_Project_tasks(ctx, field)
			case "sprints":
				return ec.fieldContext_Project_sprints(ctx, field)
			case "collaborators":
				return ec.fieldContext_Project_collaborators(ctx, field)
			case "analytics":
				return ec.fieldContext_Project_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Project_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Project_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Project", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_sprintId(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_sprintId,
		func(ctx context.Context) (any, error) {
			return obj.SprintID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_sprintId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_sprint(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_sprint,
		func(ctx context.Context) (any, error) {
			return obj.Sprint, nil
		},
		nil,
		ec.marshalOSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_sprint(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Sprint_id(ctx, field)
			case "name":
				return ec.fieldContext_Sprint_name(ctx, field)
			case "description":
				return ec.fieldContext_Sprint_description(ctx, field)
			case "goal":
				return ec.fieldContext_Sprint_goal(ctx, field)
			case "status":
				return ec.fieldContext_Sprint_status(ctx, field)
			case "startDate":
				return ec.fieldContext_Sprint_startDate(ctx, field)
			case "endDate":
				return ec.fieldContext_Sprint_endDate(ctx, field)
			case "velocity":
				return ec.fieldContext_Sprint_velocity(ctx, field)
			case "userId":
				return ec.fieldContext_Sprint_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Sprint_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Sprint_project(ctx, field)
			case "tasks":
				return ec.fieldContext_Sprint_tasks(ctx, field)
			case "analytics":
				return ec.fieldContext_Sprint_analytics(ctx, field)
			case "createdAt":
				return ec.fieldContext_Sprint_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Sprint_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Sprint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_assigneeId(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_assigneeId,
		func(ctx context.Context) (any, error) {
			return obj.AssigneeID, nil
		},
		nil,
		ec.marshalOID2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_assigneeId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_assignee(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_assignee,
		func(ctx context.Context) (any, error) {
			return obj.Assignee, nil
		},
		nil,
		ec.marshalOUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_assignee(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_pomodoroSessions(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_pomodoroSessions,
		func(ctx context.Context) (any, error) {
			return obj.PomodoroSessions, nil
		},
		nil,
		ec.marshalNPomodoroSession2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSessionᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_pomodoroSessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PomodoroSession_id(ctx, field)
			case "duration":
				return ec.fieldContext_PomodoroSession_duration(ctx, field)
			case "completed":
				return ec.fieldContext_PomodoroSession_completed(ctx, field)
			case "startTime":
				return ec.fieldContext_PomodoroSession_startTime(ctx, field)
			case "endTime":
				return ec.fieldContext_PomodoroSession_endTime(ctx, field)
			case "breakDuration":
				return ec.fieldContext_PomodoroSession_breakDuration(ctx, field)
			case "userId":
				return ec.fieldContext_PomodoroSession_userId(ctx, field)
			case "taskId":
				return ec.fieldContext_PomodoroSession_taskId(ctx, field)
			case "task":
				return ec.fieldContext_PomodoroSession_task(ctx, field)
			case "sessionType":
				return ec.fieldContext_PomodoroSession_sessionType(ctx, field)
			case "interruptions":
				return ec.fieldContext_PomodoroSession_interruptions(ctx, field)
			case "notes":
				return ec.fieldContext_PomodoroSession_notes(ctx, field)
			case "focusScore":
				return ec.fieldContext_PomodoroSession_focusScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_PomodoroSession_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSession", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_subtasks(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_subtasks,
		func(ctx context.Context) (any, error) {
			return obj.Subtasks, nil
		},
		nil,
		ec.marshalNSubtask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSubtaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_subtasks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Subtask_id(ctx, field)
			case "title":
				return ec.fieldContext_Subtask_title(ctx, field)
			case "completed":
				return ec.fieldContext_Subtask_completed(ctx, field)
			case "taskId":
				return ec.fieldContext_Subtask_taskId(ctx, field)
			case "createdAt":
				return ec.fieldContext_Subtask_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Subtask", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_comments(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_comments,
		func(ctx context.Context) (any, error) {
			return obj.Comments, nil
		},
		nil,
		ec.marshalNTaskComment2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskCommentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_comments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TaskComment_id(ctx, field)
			case "content":
				return ec.fieldContext_TaskComment_content(ctx, field)
			case "taskId":
				return ec.fieldContext_TaskComment_taskId(ctx, field)
			case "userId":
				return ec.fieldContext_TaskComment_userId(ctx, field)
			case "user":
				return ec.fieldContext_TaskComment_user(ctx, field)
			case "createdAt":
				return ec.fieldContext_TaskComment_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskComment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_attachments(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_attachments,
		func(ctx context.Context) (any, error) {
			return obj.Attachments, nil
		},
		nil,
		ec.marshalNTaskAttachment2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskAttachmentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_attachments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TaskAttachment_id(ctx, field)
			case "filename":
				return ec.fieldContext_TaskAttachment_filename(ctx, field)
			case "url":
				return ec.fieldContext_TaskAttachment_url(ctx, field)
			case "size":
				return ec.fieldContext_TaskAttachment_size(ctx, field)
			case "mimeType":
				return ec.fieldContext_TaskAttachment_mimeType(ctx, field)
			case "taskId":
				return ec.fieldContext_TaskAttachment_taskId(ctx, field)
			case "uploadedBy":
				return ec.fieldContext_TaskAttachment_uploadedBy(ctx, field)
			case "createdAt":
				return ec.fieldContext_TaskAttachment_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TaskAttachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_dependencies(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_dependencies,
		func(ctx context.Context) (any, error) {
			return obj.Dependencies, nil
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_dependencies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_dependents(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_dependents,
		func(ctx context.Context) (any, error) {
			return obj.Dependents, nil
		},
		nil,
		ec.marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_dependents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Task_id(ctx, field)
			case "title":
				return ec.fieldContext_Task_title(ctx, field)
			case "description":
				return ec.fieldContext_Task_description(ctx, field)
			case "status":
				return ec.fieldContext_Task_status(ctx, field)
			case "priority":
				return ec.fieldContext_Task_priority(ctx, field)
			case "xpValue":
				return ec.fieldContext_Task_xpValue(ctx, field)
			case "estimatedDuration":
				return ec.fieldContext_Task_estimatedDuration(ctx, field)
			case "actualDuration":
				return ec.fieldContext_Task_actualDuration(ctx, field)
			case "tags":
				return ec.fieldContext_Task_tags(ctx, field)
			case "dueDate":
				return ec.fieldContext_Task_dueDate(ctx, field)
			case "completedAt":
				return ec.fieldContext_Task_completedAt(ctx, field)
			case "isArchived":
				return ec.fieldContext_Task_isArchived(ctx, field)
			case "userId":
				return ec.fieldContext_Task_userId(ctx, field)
			case "projectId":
				return ec.fieldContext_Task_projectId(ctx, field)
			case "project":
				return ec.fieldContext_Task_project(ctx, field)
			case "sprintId":
				return ec.fieldContext_Task_sprintId(ctx, field)
			case "sprint":
				return ec.fieldContext_Task_sprint(ctx, field)
			case "assigneeId":
				return ec.fieldContext_Task_assigneeId(ctx, field)
			case "assignee":
				return ec.fieldContext_Task_assignee(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_Task_pomodoroSessions(ctx, field)
			case "subtasks":
				return ec.fieldContext_Task_subtasks(ctx, field)
			case "comments":
				return ec.fieldContext_Task_comments(ctx, field)
			case "attachments":
				return ec.fieldContext_Task_attachments(ctx, field)
			case "dependencies":
				return ec.fieldContext_Task_dependencies(ctx, field)
			case "dependents":
				return ec.fieldContext_Task_dependents(ctx, field)
			case "skillCategory":
				return ec.fieldContext_Task_skillCategory(ctx, field)
			case "createdAt":
				return ec.fieldContext_Task_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Task_updatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Task", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_skillCategory(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_skillCategory,
		func(ctx context.Context) (any, error) {
			return obj.SkillCategory, nil
		},
		nil,
		ec.marshalOSkillCategory2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillCategory,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Task_skillCategory(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SkillCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Task_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Task) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Task_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Task_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Task",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_id(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_filename(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_filename,
		func(ctx context.Context) (any, error) {
			return obj.Filename, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_filename(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_url(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_url,
		func(ctx context.Context) (any, error) {
			return obj.URL, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_url(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_size(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_size,
		func(ctx context.Context) (any, error) {
			return obj.Size, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_size(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_mimeType(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_mimeType,
		func(ctx context.Context) (any, error) {
			return obj.MimeType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_mimeType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_taskId(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_taskId,
		func(ctx context.Context) (any, error) {
			return obj.TaskID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_taskId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_uploadedBy(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_uploadedBy,
		func(ctx context.Context) (any, error) {
			return obj.UploadedBy, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_uploadedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskAttachment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TaskAttachment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskAttachment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskAttachment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_id(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_content(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_content,
		func(ctx context.Context) (any, error) {
			return obj.Content, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_taskId(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_taskId,
		func(ctx context.Context) (any, error) {
			return obj.TaskID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_taskId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_userId(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_user(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_user,
		func(ctx context.Context) (any, error) {
			return obj.User, nil
		},
		nil,
		ec.marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "firstName":
				return ec.fieldContext_User_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_User_lastName(ctx, field)
			case "avatarUrl":
				return ec.fieldContext_User_avatarUrl(ctx, field)
			case "level":
				return ec.fieldContext_User_level(ctx, field)
			case "totalXp":
				return ec.fieldContext_User_totalXp(ctx, field)
			case "currentStreak":
				return ec.fieldContext_User_currentStreak(ctx, field)
			case "maxStreak":
				return ec.fieldContext_User_maxStreak(ctx, field)
			case "createdAt":
				return ec.fieldContext_User_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_User_updatedAt(ctx, field)
			case "skillTrees":
				return ec.fieldContext_User_skillTrees(ctx, field)
			case "badges":
				return ec.fieldContext_User_badges(ctx, field)
			case "achievements":
				return ec.fieldContext_User_achievements(ctx, field)
			case "preferences":
				return ec.fieldContext_User_preferences(ctx, field)
			case "analytics":
				return ec.fieldContext_User_analytics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TaskComment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TaskComment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TaskComment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TaskComment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TaskComment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_firstName,
		func(ctx context.Context) (any, error) {
			return obj.FirstName, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_User_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_lastName,
		func(ctx context.Context) (any, error) {
			return obj.LastName, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_User_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_avatarUrl(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_avatarUrl,
		func(ctx context.Context) (any, error) {
			return obj.AvatarURL, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_User_avatarUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_level(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_level,
		func(ctx context.Context) (any, error) {
			return obj.Level, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_level(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_totalXp(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_totalXp,
		func(ctx context.Context) (any, error) {
			return obj.TotalXp, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_totalXp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_currentStreak(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_currentStreak,
		func(ctx context.Context) (any, error) {
			return obj.CurrentStreak, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_currentStreak(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_maxStreak(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_maxStreak,
		func(ctx context.Context) (any, error) {
			return obj.MaxStreak, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_maxStreak(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_skillTrees(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_skillTrees,
		func(ctx context.Context) (any, error) {
			return obj.SkillTrees, nil
		},
		nil,
		ec.marshalNSkillTree2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillTreeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_skillTrees(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SkillTree_id(ctx, field)
			case "name":
				return ec.fieldContext_SkillTree_name(ctx, field)
			case "category":
				return ec.fieldContext_SkillTree_category(ctx, field)
			case "totalXp":
				return ec.fieldContext_SkillTree_totalXp(ctx, field)
			case "level":
				return ec.fieldContext_SkillTree_level(ctx, field)
			case "skills":
				return ec.fieldContext_SkillTree_skills(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_SkillTree_unlockedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SkillTree", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_badges(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_badges,
		func(ctx context.Context) (any, error) {
			return obj.Badges, nil
		},
		nil,
		ec.marshalNBadge2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐBadgeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_badges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Badge_id(ctx, field)
			case "name":
				return ec.fieldContext_Badge_name(ctx, field)
			case "description":
				return ec.fieldContext_Badge_description(ctx, field)
			case "icon":
				return ec.fieldContext_Badge_icon(ctx, field)
			case "rarity":
				return ec.fieldContext_Badge_rarity(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_Badge_unlockedAt(ctx, field)
			case "criteria":
				return ec.fieldContext_Badge_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_achievements(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_achievements,
		func(ctx context.Context) (any, error) {
			return obj.Achievements, nil
		},
		nil,
		ec.marshalNAchievement2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐAchievementᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_achievements(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Achievement_id(ctx, field)
			case "name":
				return ec.fieldContext_Achievement_name(ctx, field)
			case "description":
				return ec.fieldContext_Achievement_description(ctx, field)
			case "icon":
				return ec.fieldContext_Achievement_icon(ctx, field)
			case "progress":
				return ec.fieldContext_Achievement_progress(ctx, field)
			case "maxProgress":
				return ec.fieldContext_Achievement_maxProgress(ctx, field)
			case "completed":
				return ec.fieldContext_Achievement_completed(ctx, field)
			case "xpReward":
				return ec.fieldContext_Achievement_xpReward(ctx, field)
			case "badgeReward":
				return ec.fieldContext_Achievement_badgeReward(ctx, field)
			case "unlockedAt":
				return ec.fieldContext_Achievement_unlockedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Achievement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_preferences(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_preferences,
		func(ctx context.Context) (any, error) {
			return obj.Preferences, nil
		},
		nil,
		ec.marshalNUserPreferences2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserPreferences,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_preferences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserPreferences_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserPreferences_userId(ctx, field)
			case "theme":
				return ec.fieldContext_UserPreferences_theme(ctx, field)
			case "notifications":
				return ec.fieldContext_UserPreferences_notifications(ctx, field)
			case "pomodoroSettings":
				return ec.fieldContext_UserPreferences_pomodoroSettings(ctx, field)
			case "timezone":
				return ec.fieldContext_UserPreferences_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserPreferences", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_analytics(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_User_analytics,
		func(ctx context.Context) (any, error) {
			return obj.Analytics, nil
		},
		nil,
		ec.marshalNUserAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_User_analytics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UserAnalytics_id(ctx, field)
			case "userId":
				return ec.fieldContext_UserAnalytics_userId(ctx, field)
			case "dailyStats":
				return ec.fieldContext_UserAnalytics_dailyStats(ctx, field)
			case "weeklyStats":
				return ec.fieldContext_UserAnalytics_weeklyStats(ctx, field)
			case "monthlyStats":
				return ec.fieldContext_UserAnalytics_monthlyStats(ctx, field)
			case "productivity":
				return ec.fieldContext_UserAnalytics_productivity(ctx, field)
			case "focus":
				return ec.fieldContext_UserAnalytics_focus(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAnalytics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_id(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_dailyStats(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_dailyStats,
		func(ctx context.Context) (any, error) {
			return obj.DailyStats, nil
		},
		nil,
		ec.marshalNDailyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐDailyStatᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_dailyStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "date":
				return ec.fieldContext_DailyStat_date(ctx, field)
			case "tasksCompleted":
				return ec.fieldContext_DailyStat_tasksCompleted(ctx, field)
			case "xpEarned":
				return ec.fieldContext_DailyStat_xpEarned(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_DailyStat_pomodoroSessions(ctx, field)
			case "focusTime":
				return ec.fieldContext_DailyStat_focusTime(ctx, field)
			case "projectsWorkedOn":
				return ec.fieldContext_DailyStat_projectsWorkedOn(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DailyStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_weeklyStats(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_weeklyStats,
		func(ctx context.Context) (any, error) {
			return obj.WeeklyStats, nil
		},
		nil,
		ec.marshalNWeeklyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐWeeklyStatᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_weeklyStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "weekStart":
				return ec.fieldContext_WeeklyStat_weekStart(ctx, field)
			case "tasksCompleted":
				return ec.fieldContext_WeeklyStat_tasksCompleted(ctx, field)
			case "xpEarned":
				return ec.fieldContext_WeeklyStat_xpEarned(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_WeeklyStat_pomodoroSessions(ctx, field)
			case "focusTime":
				return ec.fieldContext_WeeklyStat_focusTime(ctx, field)
			case "averageProductivity":
				return ec.fieldContext_WeeklyStat_averageProductivity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WeeklyStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_monthlyStats(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_monthlyStats,
		func(ctx context.Context) (any, error) {
			return obj.MonthlyStats, nil
		},
		nil,
		ec.marshalNMonthlyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐMonthlyStatᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_monthlyStats(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_MonthlyStat_month(ctx, field)
			case "year":
				return ec.fieldContext_MonthlyStat_year(ctx, field)
			case "tasksCompleted":
				return ec.fieldContext_MonthlyStat_tasksCompleted(ctx, field)
			case "xpEarned":
				return ec.fieldContext_MonthlyStat_xpEarned(ctx, field)
			case "pomodoroSessions":
				return ec.fieldContext_MonthlyStat_pomodoroSessions(ctx, field)
			case "focusTime":
				return ec.fieldContext_MonthlyStat_focusTime(ctx, field)
			case "goalsAchieved":
				return ec.fieldContext_MonthlyStat_goalsAchieved(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MonthlyStat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_productivity(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_productivity,
		func(ctx context.Context) (any, error) {
			return obj.Productivity, nil
		},
		nil,
		ec.marshalNProductivityAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProductivityAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_productivity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "averageTasksPerDay":
				return ec.fieldContext_ProductivityAnalytics_averageTasksPerDay(ctx, field)
			case "peakProductivityHour":
				return ec.fieldContext_ProductivityAnalytics_peakProductivityHour(ctx, field)
			case "mostProductiveDay":
				return ec.fieldContext_ProductivityAnalytics_mostProductiveDay(ctx, field)
			case "taskCompletionRate":
				return ec.fieldContext_ProductivityAnalytics_taskCompletionRate(ctx, field)
			case "averageTaskDuration":
				return ec.fieldContext_ProductivityAnalytics_averageTaskDuration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductivityAnalytics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAnalytics_focus(ctx context.Context, field graphql.CollectedField, obj *model.UserAnalytics) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserAnalytics_focus,
		func(ctx context.Context) (any, error) {
			return obj.Focus, nil
		},
		nil,
		ec.marshalNFocusAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFocusAnalytics,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserAnalytics_focus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAnalytics",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "averageSessionDuration":
				return ec.fieldContext_FocusAnalytics_averageSessionDuration(ctx, field)
			case "totalFocusTime":
				return ec.fieldContext_FocusAnalytics_totalFocusTime(ctx, field)
			case "focusStreakDays":
				return ec.fieldContext_FocusAnalytics_focusStreakDays(ctx, field)
			case "preferredFocusTime":
				return ec.fieldContext_FocusAnalytics_preferredFocusTime(ctx, field)
			case "focusEfficiency":
				return ec.fieldContext_FocusAnalytics_focusEfficiency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FocusAnalytics", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_id(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_userId,
		func(ctx context.Context) (any, error) {
			return obj.UserID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_userId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_theme(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_theme,
		func(ctx context.Context) (any, error) {
			return obj.Theme, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_theme(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_notifications(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_notifications,
		func(ctx context.Context) (any, error) {
			return obj.Notifications, nil
		},
		nil,
		ec.marshalNNotificationSettings2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationSettings,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_notifications(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "email":
				return ec.fieldContext_NotificationSettings_email(ctx, field)
			case "push":
				return ec.fieldContext_NotificationSettings_push(ctx, field)
			case "sessionReminders":
				return ec.fieldContext_NotificationSettings_sessionReminders(ctx, field)
			case "dailyGoals":
				return ec.fieldContext_NotificationSettings_dailyGoals(ctx, field)
			case "weeklyReports":
				return ec.fieldContext_NotificationSettings_weeklyReports(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotificationSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_pomodoroSettings(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_pomodoroSettings,
		func(ctx context.Context) (any, error) {
			return obj.PomodoroSettings, nil
		},
		nil,
		ec.marshalNPomodoroSettings2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSettings,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_pomodoroSettings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "workDuration":
				return ec.fieldContext_PomodoroSettings_workDuration(ctx, field)
			case "shortBreakDuration":
				return ec.fieldContext_PomodoroSettings_shortBreakDuration(ctx, field)
			case "longBreakDuration":
				return ec.fieldContext_PomodoroSettings_longBreakDuration(ctx, field)
			case "sessionsUntilLongBreak":
				return ec.fieldContext_PomodoroSettings_sessionsUntilLongBreak(ctx, field)
			case "autoStartBreaks":
				return ec.fieldContext_PomodoroSettings_autoStartBreaks(ctx, field)
			case "autoStartWork":
				return ec.fieldContext_PomodoroSettings_autoStartWork(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PomodoroSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserPreferences_timezone(ctx context.Context, field graphql.CollectedField, obj *model.UserPreferences) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_UserPreferences_timezone,
		func(ctx context.Context) (any, error) {
			return obj.Timezone, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_UserPreferences_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserPreferences",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_weekStart(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_weekStart,
		func(ctx context.Context) (any, error) {
			return obj.WeekStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_weekStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_tasksCompleted(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_tasksCompleted,
		func(ctx context.Context) (any, error) {
			return obj.TasksCompleted, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_tasksCompleted(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_xpEarned(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_xpEarned,
		func(ctx context.Context) (any, error) {
			return obj.XpEarned, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_xpEarned(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_pomodoroSessions(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_pomodoroSessions,
		func(ctx context.Context) (any, error) {
			return obj.PomodoroSessions, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_pomodoroSessions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_focusTime(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_focusTime,
		func(ctx context.Context) (any, error) {
			return obj.FocusTime, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_focusTime(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyStat_averageProductivity(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyStat) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_WeeklyStat_averageProductivity,
		func(ctx context.Context) (any, error) {
			return obj.AverageProductivity, nil
		},
		nil,
		ec.marshalNFloat2float64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_WeeklyStat_averageProductivity(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyStat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateFolderInput(ctx context.Context, obj any) (model.CreateFolderInput, error) {
	var it model.CreateFolderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "color", "icon", "parentId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "parentId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParentID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePomodoroSessionInput(ctx context.Context, obj any) (model.CreatePomodoroSessionInput, error) {
	var it model.CreatePomodoroSessionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"duration", "taskId", "sessionType"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "duration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("duration"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Duration = data
		case "taskId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TaskID = data
		case "sessionType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionType"))
			data, err := ec.unmarshalNSessionType2lifequestᚑserverᚋgraphᚋmodelᚐSessionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionType = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateProjectInput(ctx context.Context, obj any) (model.CreateProjectInput, error) {
	var it model.CreateProjectInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "color", "icon", "priority", "startDate", "endDate", "folderId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "folderId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FolderID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSprintInput(ctx context.Context, obj any) (model.CreateSprintInput, error) {
	var it model.CreateSprintInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "goal", "startDate", "endDate", "projectId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "goal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("goal"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Goal = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "projectId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTaskInput(ctx context.Context, obj any) (model.CreateTaskInput, error) {
	var it model.CreateTaskInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "priority", "xpValue", "estimatedDuration", "tags", "dueDate", "projectId", "skillCategory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "xpValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpValue"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.XpValue = data
		case "estimatedDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedDuration = data
		case "tags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tags = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "projectId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProjectID = data
		case "skillCategory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skillCategory"))
			data, err := ec.unmarshalOSkillCategory2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkillCategory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj any) (model.CreateUserInput, error) {
	var it model.CreateUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "firstName", "lastName", "avatarUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "avatarUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotificationSettingsInput(ctx context.Context, obj any) (model.NotificationSettingsInput, error) {
	var it model.NotificationSettingsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "push", "sessionReminders", "dailyGoals", "weeklyReports"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "push":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("push"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Push = data
		case "sessionReminders":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionReminders"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionReminders = data
		case "dailyGoals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dailyGoals"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DailyGoals = data
		case "weeklyReports":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weeklyReports"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.WeeklyReports = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPomodoroSettingsInput(ctx context.Context, obj any) (model.PomodoroSettingsInput, error) {
	var it model.PomodoroSettingsInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"workDuration", "shortBreakDuration", "longBreakDuration", "sessionsUntilLongBreak", "autoStartBreaks", "autoStartWork"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "workDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkDuration = data
		case "shortBreakDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shortBreakDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShortBreakDuration = data
		case "longBreakDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("longBreakDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.LongBreakDuration = data
		case "sessionsUntilLongBreak":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionsUntilLongBreak"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.SessionsUntilLongBreak = data
		case "autoStartBreaks":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoStartBreaks"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoStartBreaks = data
		case "autoStartWork":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("autoStartWork"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.AutoStartWork = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFolderInput(ctx context.Context, obj any) (model.UpdateFolderInput, error) {
	var it model.UpdateFolderInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "color", "icon", "isArchived"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "isArchived":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsArchived = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePomodoroSessionInput(ctx context.Context, obj any) (model.UpdatePomodoroSessionInput, error) {
	var it model.UpdatePomodoroSessionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"completed", "endTime", "breakDuration", "interruptions", "notes", "focusScore"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "completed":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("completed"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Completed = data
		case "endTime":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndTime = data
		case "breakDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("breakDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.BreakDuration = data
		case "interruptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interruptions"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Interruptions = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		case "focusScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("focusScore"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.FocusScore = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateProjectInput(ctx context.Context, obj any) (model.UpdateProjectInput, error) {
	var it model.UpdateProjectInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "color", "icon", "status", "priority", "startDate", "endDate", "isArchived"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "color":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Color = data
		case "icon":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Icon = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOProjectStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalOPriority2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		case "isArchived":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isArchived"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsArchived = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSprintInput(ctx context.Context, obj any) (model.UpdateSprintInput, error) {
	var it model.UpdateSprintInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description", "goal", "status", "startDate", "endDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "goal":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("goal"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Goal = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOSprintStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "startDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartDate = data
		case "endDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndDate = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTaskInput(ctx context.Context, obj any) (model.UpdateTaskInput, error) {
	var it model.UpdateTaskInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "description", "status", "priority", "xpValue", "estimatedDuration", "tags", "dueDate", "skillCategory"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "description":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Description = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOTaskStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "priority":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			data, err := ec.unmarshalOPriority2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx, v)
			if err != nil {
				return it, err
			}
			it.Priority = data
		case "xpValue":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("xpValue"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.XpValue = data
		case "estimatedDuration":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("estimatedDuration"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.EstimatedDuration = data
		case "tags":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tags = data
		case "dueDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dueDate"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DueDate = data
		case "skillCategory":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skillCategory"))
			data, err := ec.unmarshalOSkillCategory2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.SkillCategory = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj any) (model.UpdateUserInput, error) {
	var it model.UpdateUserInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "avatarUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "avatarUrl":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("avatarUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AvatarURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserPreferencesInput(ctx context.Context, obj any) (model.UpdateUserPreferencesInput, error) {
	var it model.UpdateUserPreferencesInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"theme", "notifications", "pomodoroSettings", "timezone"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "theme":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		case "notifications":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notifications"))
			data, err := ec.unmarshalONotificationSettingsInput2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationSettingsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notifications = data
		case "pomodoroSettings":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pomodoroSettings"))
			data, err := ec.unmarshalOPomodoroSettingsInput2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSettingsInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.PomodoroSettings = data
		case "timezone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timezone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Timezone = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var achievementImplementors = []string{"Achievement"}

func (ec *executionContext) _Achievement(ctx context.Context, sel ast.SelectionSet, obj *model.Achievement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, achievementImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Achievement")
		case "id":
			out.Values[i] = ec._Achievement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Achievement_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Achievement_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "icon":
			out.Values[i] = ec._Achievement_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "progress":
			out.Values[i] = ec._Achievement_progress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxProgress":
			out.Values[i] = ec._Achievement_maxProgress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completed":
			out.Values[i] = ec._Achievement_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpReward":
			out.Values[i] = ec._Achievement_xpReward(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badgeReward":
			out.Values[i] = ec._Achievement_badgeReward(ctx, field, obj)
		case "unlockedAt":
			out.Values[i] = ec._Achievement_unlockedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var badgeImplementors = []string{"Badge"}

func (ec *executionContext) _Badge(ctx context.Context, sel ast.SelectionSet, obj *model.Badge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, badgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Badge")
		case "id":
			out.Values[i] = ec._Badge_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Badge_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Badge_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "icon":
			out.Values[i] = ec._Badge_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rarity":
			out.Values[i] = ec._Badge_rarity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unlockedAt":
			out.Values[i] = ec._Badge_unlockedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "criteria":
			out.Values[i] = ec._Badge_criteria(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var burndownPointImplementors = []string{"BurndownPoint"}

func (ec *executionContext) _BurndownPoint(ctx context.Context, sel ast.SelectionSet, obj *model.BurndownPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, burndownPointImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BurndownPoint")
		case "date":
			out.Values[i] = ec._BurndownPoint_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remainingPoints":
			out.Values[i] = ec._BurndownPoint_remainingPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "idealRemaining":
			out.Values[i] = ec._BurndownPoint_idealRemaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dailyStatImplementors = []string{"DailyStat"}

func (ec *executionContext) _DailyStat(ctx context.Context, sel ast.SelectionSet, obj *model.DailyStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dailyStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DailyStat")
		case "date":
			out.Values[i] = ec._DailyStat_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tasksCompleted":
			out.Values[i] = ec._DailyStat_tasksCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpEarned":
			out.Values[i] = ec._DailyStat_xpEarned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pomodoroSessions":
			out.Values[i] = ec._DailyStat_pomodoroSessions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focusTime":
			out.Values[i] = ec._DailyStat_focusTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projectsWorkedOn":
			out.Values[i] = ec._DailyStat_projectsWorkedOn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var focusAnalyticsImplementors = []string{"FocusAnalytics"}

func (ec *executionContext) _FocusAnalytics(ctx context.Context, sel ast.SelectionSet, obj *model.FocusAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, focusAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FocusAnalytics")
		case "averageSessionDuration":
			out.Values[i] = ec._FocusAnalytics_averageSessionDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalFocusTime":
			out.Values[i] = ec._FocusAnalytics_totalFocusTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focusStreakDays":
			out.Values[i] = ec._FocusAnalytics_focusStreakDays(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "preferredFocusTime":
			out.Values[i] = ec._FocusAnalytics_preferredFocusTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focusEfficiency":
			out.Values[i] = ec._FocusAnalytics_focusEfficiency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var folderImplementors = []string{"Folder"}

func (ec *executionContext) _Folder(ctx context.Context, sel ast.SelectionSet, obj *model.Folder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, folderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Folder")
		case "id":
			out.Values[i] = ec._Folder_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Folder_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Folder_description(ctx, field, obj)
		case "color":
			out.Values[i] = ec._Folder_color(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Folder_icon(ctx, field, obj)
		case "isArchived":
			out.Values[i] = ec._Folder_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Folder_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parentId":
			out.Values[i] = ec._Folder_parentId(ctx, field, obj)
		case "children":
			out.Values[i] = ec._Folder_children(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projects":
			out.Values[i] = ec._Folder_projects(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Folder_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Folder_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var monthlyStatImplementors = []string{"MonthlyStat"}

func (ec *executionContext) _MonthlyStat(ctx context.Context, sel ast.SelectionSet, obj *model.MonthlyStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, monthlyStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MonthlyStat")
		case "month":
			out.Values[i] = ec._MonthlyStat_month(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "year":
			out.Values[i] = ec._MonthlyStat_year(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tasksCompleted":
			out.Values[i] = ec._MonthlyStat_tasksCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpEarned":
			out.Values[i] = ec._MonthlyStat_xpEarned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pomodoroSessions":
			out.Values[i] = ec._MonthlyStat_pomodoroSessions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focusTime":
			out.Values[i] = ec._MonthlyStat_focusTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "goalsAchieved":
			out.Values[i] = ec._MonthlyStat_goalsAchieved(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUser":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUser(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateUserPreferences":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateUserPreferences(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteFolder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteFolder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteProject":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteProject(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteTask":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteTask(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "toggleTaskStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_toggleTaskStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSprint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSprint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateSprint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateSprint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSprint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSprint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addTaskToSprint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addTaskToSprint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeTaskFromSprint":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeTaskFromSprint(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startPomodoroSession":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_startPomodoroSession(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePomodoroSession":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePomodoroSession(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completePomodoroSession":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_completePomodoroSession(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markNotificationAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markNotificationAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "markAllNotificationsAsRead":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_markAllNotificationsAsRead(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "inviteCollaborator":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_inviteCollaborator(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCollaboratorRole":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCollaboratorRole(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeCollaborator":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeCollaborator(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notificationImplementors = []string{"Notification"}

func (ec *executionContext) _Notification(ctx context.Context, sel ast.SelectionSet, obj *model.Notification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Notification")
		case "id":
			out.Values[i] = ec._Notification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Notification_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._Notification_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Notification_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "read":
			out.Values[i] = ec._Notification_read(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Notification_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._Notification_data(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Notification_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notificationSettingsImplementors = []string{"NotificationSettings"}

func (ec *executionContext) _NotificationSettings(ctx context.Context, sel ast.SelectionSet, obj *model.NotificationSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationSettings")
		case "email":
			out.Values[i] = ec._NotificationSettings_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "push":
			out.Values[i] = ec._NotificationSettings_push(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sessionReminders":
			out.Values[i] = ec._NotificationSettings_sessionReminders(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dailyGoals":
			out.Values[i] = ec._NotificationSettings_dailyGoals(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "weeklyReports":
			out.Values[i] = ec._NotificationSettings_weeklyReports(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pomodoroSessionImplementors = []string{"PomodoroSession"}

func (ec *executionContext) _PomodoroSession(ctx context.Context, sel ast.SelectionSet, obj *model.PomodoroSession) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pomodoroSessionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PomodoroSession")
		case "id":
			out.Values[i] = ec._PomodoroSession_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "duration":
			out.Values[i] = ec._PomodoroSession_duration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completed":
			out.Values[i] = ec._PomodoroSession_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startTime":
			out.Values[i] = ec._PomodoroSession_startTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endTime":
			out.Values[i] = ec._PomodoroSession_endTime(ctx, field, obj)
		case "breakDuration":
			out.Values[i] = ec._PomodoroSession_breakDuration(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._PomodoroSession_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskId":
			out.Values[i] = ec._PomodoroSession_taskId(ctx, field, obj)
		case "task":
			out.Values[i] = ec._PomodoroSession_task(ctx, field, obj)
		case "sessionType":
			out.Values[i] = ec._PomodoroSession_sessionType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interruptions":
			out.Values[i] = ec._PomodoroSession_interruptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notes":
			out.Values[i] = ec._PomodoroSession_notes(ctx, field, obj)
		case "focusScore":
			out.Values[i] = ec._PomodoroSession_focusScore(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._PomodoroSession_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pomodoroSettingsImplementors = []string{"PomodoroSettings"}

func (ec *executionContext) _PomodoroSettings(ctx context.Context, sel ast.SelectionSet, obj *model.PomodoroSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pomodoroSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PomodoroSettings")
		case "workDuration":
			out.Values[i] = ec._PomodoroSettings_workDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shortBreakDuration":
			out.Values[i] = ec._PomodoroSettings_shortBreakDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "longBreakDuration":
			out.Values[i] = ec._PomodoroSettings_longBreakDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sessionsUntilLongBreak":
			out.Values[i] = ec._PomodoroSettings_sessionsUntilLongBreak(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "autoStartBreaks":
			out.Values[i] = ec._PomodoroSettings_autoStartBreaks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "autoStartWork":
			out.Values[i] = ec._PomodoroSettings_autoStartWork(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var productivityAnalyticsImplementors = []string{"ProductivityAnalytics"}

func (ec *executionContext) _ProductivityAnalytics(ctx context.Context, sel ast.SelectionSet, obj *model.ProductivityAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productivityAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductivityAnalytics")
		case "averageTasksPerDay":
			out.Values[i] = ec._ProductivityAnalytics_averageTasksPerDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "peakProductivityHour":
			out.Values[i] = ec._ProductivityAnalytics_peakProductivityHour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mostProductiveDay":
			out.Values[i] = ec._ProductivityAnalytics_mostProductiveDay(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskCompletionRate":
			out.Values[i] = ec._ProductivityAnalytics_taskCompletionRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageTaskDuration":
			out.Values[i] = ec._ProductivityAnalytics_averageTaskDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectImplementors = []string{"Project"}

func (ec *executionContext) _Project(ctx context.Context, sel ast.SelectionSet, obj *model.Project) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Project")
		case "id":
			out.Values[i] = ec._Project_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Project_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Project_description(ctx, field, obj)
		case "color":
			out.Values[i] = ec._Project_color(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Project_icon(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Project_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priority":
			out.Values[i] = ec._Project_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startDate":
			out.Values[i] = ec._Project_startDate(ctx, field, obj)
		case "endDate":
			out.Values[i] = ec._Project_endDate(ctx, field, obj)
		case "isArchived":
			out.Values[i] = ec._Project_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Project_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "folderId":
			out.Values[i] = ec._Project_folderId(ctx, field, obj)
		case "folder":
			out.Values[i] = ec._Project_folder(ctx, field, obj)
		case "tasks":
			out.Values[i] = ec._Project_tasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sprints":
			out.Values[i] = ec._Project_sprints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "collaborators":
			out.Values[i] = ec._Project_collaborators(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "analytics":
			out.Values[i] = ec._Project_analytics(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Project_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Project_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectAnalyticsImplementors = []string{"ProjectAnalytics"}

func (ec *executionContext) _ProjectAnalytics(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectAnalytics")
		case "totalTasks":
			out.Values[i] = ec._ProjectAnalytics_totalTasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completedTasks":
			out.Values[i] = ec._ProjectAnalytics_completedTasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "overdueTasks":
			out.Values[i] = ec._ProjectAnalytics_overdueTasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageTaskDuration":
			out.Values[i] = ec._ProjectAnalytics_averageTaskDuration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completionRate":
			out.Values[i] = ec._ProjectAnalytics_completionRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeSpent":
			out.Values[i] = ec._ProjectAnalytics_timeSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpEarned":
			out.Values[i] = ec._ProjectAnalytics_xpEarned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var projectCollaboratorImplementors = []string{"ProjectCollaborator"}

func (ec *executionContext) _ProjectCollaborator(ctx context.Context, sel ast.SelectionSet, obj *model.ProjectCollaborator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, projectCollaboratorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProjectCollaborator")
		case "id":
			out.Values[i] = ec._ProjectCollaborator_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projectId":
			out.Values[i] = ec._ProjectCollaborator_projectId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._ProjectCollaborator_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._ProjectCollaborator_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "role":
			out.Values[i] = ec._ProjectCollaborator_role(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "invitedAt":
			out.Values[i] = ec._ProjectCollaborator_invitedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "joinedAt":
			out.Values[i] = ec._ProjectCollaborator_joinedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "me":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folders":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "folder":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_folder(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projects":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "project":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_project(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "task":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_task(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tasksByDueDate":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tasksByDueDate(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "overdueTasks":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_overdueTasks(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "sprints":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sprints(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "sprint":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sprint(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "activeSprints":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activeSprints(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pomodoroSessions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pomodoroSessions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pomodoroSession":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pomodoroSession(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "todaysSessions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_todaysSessions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "userAnalytics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userAnalytics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "projectAnalytics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_projectAnalytics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "sprintAnalytics":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sprintAnalytics(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "achievements":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_achievements(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "badges":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_badges(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "skillTrees":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_skillTrees(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "notifications":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "unreadNotificationCount":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_unreadNotificationCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var skillImplementors = []string{"Skill"}

func (ec *executionContext) _Skill(ctx context.Context, sel ast.SelectionSet, obj *model.Skill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Skill")
		case "id":
			out.Values[i] = ec._Skill_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Skill_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Skill_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "icon":
			out.Values[i] = ec._Skill_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "requiredXp":
			out.Values[i] = ec._Skill_requiredXp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unlocked":
			out.Values[i] = ec._Skill_unlocked(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "level":
			out.Values[i] = ec._Skill_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxLevel":
			out.Values[i] = ec._Skill_maxLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._Skill_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var skillTreeImplementors = []string{"SkillTree"}

func (ec *executionContext) _SkillTree(ctx context.Context, sel ast.SelectionSet, obj *model.SkillTree) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillTreeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillTree")
		case "id":
			out.Values[i] = ec._SkillTree_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SkillTree_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._SkillTree_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalXp":
			out.Values[i] = ec._SkillTree_totalXp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "level":
			out.Values[i] = ec._SkillTree_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "skills":
			out.Values[i] = ec._SkillTree_skills(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unlockedAt":
			out.Values[i] = ec._SkillTree_unlockedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sprintImplementors = []string{"Sprint"}

func (ec *executionContext) _Sprint(ctx context.Context, sel ast.SelectionSet, obj *model.Sprint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sprintImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Sprint")
		case "id":
			out.Values[i] = ec._Sprint_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Sprint_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Sprint_description(ctx, field, obj)
		case "goal":
			out.Values[i] = ec._Sprint_goal(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Sprint_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startDate":
			out.Values[i] = ec._Sprint_startDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endDate":
			out.Values[i] = ec._Sprint_endDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "velocity":
			out.Values[i] = ec._Sprint_velocity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Sprint_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projectId":
			out.Values[i] = ec._Sprint_projectId(ctx, field, obj)
		case "project":
			out.Values[i] = ec._Sprint_project(ctx, field, obj)
		case "tasks":
			out.Values[i] = ec._Sprint_tasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "analytics":
			out.Values[i] = ec._Sprint_analytics(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Sprint_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Sprint_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sprintAnalyticsImplementors = []string{"SprintAnalytics"}

func (ec *executionContext) _SprintAnalytics(ctx context.Context, sel ast.SelectionSet, obj *model.SprintAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sprintAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SprintAnalytics")
		case "plannedStoryPoints":
			out.Values[i] = ec._SprintAnalytics_plannedStoryPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completedStoryPoints":
			out.Values[i] = ec._SprintAnalytics_completedStoryPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "burndownData":
			out.Values[i] = ec._SprintAnalytics_burndownData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "velocityTrend":
			out.Values[i] = ec._SprintAnalytics_velocityTrend(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completionRate":
			out.Values[i] = ec._SprintAnalytics_completionRate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sprintTaskImplementors = []string{"SprintTask"}

func (ec *executionContext) _SprintTask(ctx context.Context, sel ast.SelectionSet, obj *model.SprintTask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sprintTaskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SprintTask")
		case "id":
			out.Values[i] = ec._SprintTask_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sprintId":
			out.Values[i] = ec._SprintTask_sprintId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskId":
			out.Values[i] = ec._SprintTask_taskId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "task":
			out.Values[i] = ec._SprintTask_task(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "storyPoints":
			out.Values[i] = ec._SprintTask_storyPoints(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignedAt":
			out.Values[i] = ec._SprintTask_assignedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func(ctx context.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "notificationAdded":
		return ec._Subscription_notificationAdded(ctx, fields[0])
	case "pomodoroSessionUpdated":
		return ec._Subscription_pomodoroSessionUpdated(ctx, fields[0])
	case "taskUpdated":
		return ec._Subscription_taskUpdated(ctx, fields[0])
	case "sprintUpdated":
		return ec._Subscription_sprintUpdated(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var subtaskImplementors = []string{"Subtask"}

func (ec *executionContext) _Subtask(ctx context.Context, sel ast.SelectionSet, obj *model.Subtask) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subtaskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Subtask")
		case "id":
			out.Values[i] = ec._Subtask_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Subtask_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "completed":
			out.Values[i] = ec._Subtask_completed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskId":
			out.Values[i] = ec._Subtask_taskId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Subtask_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskImplementors = []string{"Task"}

func (ec *executionContext) _Task(ctx context.Context, sel ast.SelectionSet, obj *model.Task) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Task")
		case "id":
			out.Values[i] = ec._Task_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Task_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Task_description(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Task_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "priority":
			out.Values[i] = ec._Task_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpValue":
			out.Values[i] = ec._Task_xpValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "estimatedDuration":
			out.Values[i] = ec._Task_estimatedDuration(ctx, field, obj)
		case "actualDuration":
			out.Values[i] = ec._Task_actualDuration(ctx, field, obj)
		case "tags":
			out.Values[i] = ec._Task_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dueDate":
			out.Values[i] = ec._Task_dueDate(ctx, field, obj)
		case "completedAt":
			out.Values[i] = ec._Task_completedAt(ctx, field, obj)
		case "isArchived":
			out.Values[i] = ec._Task_isArchived(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._Task_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "projectId":
			out.Values[i] = ec._Task_projectId(ctx, field, obj)
		case "project":
			out.Values[i] = ec._Task_project(ctx, field, obj)
		case "sprintId":
			out.Values[i] = ec._Task_sprintId(ctx, field, obj)
		case "sprint":
			out.Values[i] = ec._Task_sprint(ctx, field, obj)
		case "assigneeId":
			out.Values[i] = ec._Task_assigneeId(ctx, field, obj)
		case "assignee":
			out.Values[i] = ec._Task_assignee(ctx, field, obj)
		case "pomodoroSessions":
			out.Values[i] = ec._Task_pomodoroSessions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subtasks":
			out.Values[i] = ec._Task_subtasks(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "comments":
			out.Values[i] = ec._Task_comments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attachments":
			out.Values[i] = ec._Task_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dependencies":
			out.Values[i] = ec._Task_dependencies(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dependents":
			out.Values[i] = ec._Task_dependents(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "skillCategory":
			out.Values[i] = ec._Task_skillCategory(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Task_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Task_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskAttachmentImplementors = []string{"TaskAttachment"}

func (ec *executionContext) _TaskAttachment(ctx context.Context, sel ast.SelectionSet, obj *model.TaskAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskAttachment")
		case "id":
			out.Values[i] = ec._TaskAttachment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "filename":
			out.Values[i] = ec._TaskAttachment_filename(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._TaskAttachment_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "size":
			out.Values[i] = ec._TaskAttachment_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._TaskAttachment_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskId":
			out.Values[i] = ec._TaskAttachment_taskId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uploadedBy":
			out.Values[i] = ec._TaskAttachment_uploadedBy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TaskAttachment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var taskCommentImplementors = []string{"TaskComment"}

func (ec *executionContext) _TaskComment(ctx context.Context, sel ast.SelectionSet, obj *model.TaskComment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, taskCommentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TaskComment")
		case "id":
			out.Values[i] = ec._TaskComment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._TaskComment_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "taskId":
			out.Values[i] = ec._TaskComment_taskId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._TaskComment_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "user":
			out.Values[i] = ec._TaskComment_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._TaskComment_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
		case "avatarUrl":
			out.Values[i] = ec._User_avatarUrl(ctx, field, obj)
		case "level":
			out.Values[i] = ec._User_level(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalXp":
			out.Values[i] = ec._User_totalXp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentStreak":
			out.Values[i] = ec._User_currentStreak(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxStreak":
			out.Values[i] = ec._User_maxStreak(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "skillTrees":
			out.Values[i] = ec._User_skillTrees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badges":
			out.Values[i] = ec._User_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "achievements":
			out.Values[i] = ec._User_achievements(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "preferences":
			out.Values[i] = ec._User_preferences(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "analytics":
			out.Values[i] = ec._User_analytics(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userAnalyticsImplementors = []string{"UserAnalytics"}

func (ec *executionContext) _UserAnalytics(ctx context.Context, sel ast.SelectionSet, obj *model.UserAnalytics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAnalyticsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAnalytics")
		case "id":
			out.Values[i] = ec._UserAnalytics_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._UserAnalytics_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "dailyStats":
			out.Values[i] = ec._UserAnalytics_dailyStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "weeklyStats":
			out.Values[i] = ec._UserAnalytics_weeklyStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "monthlyStats":
			out.Values[i] = ec._UserAnalytics_monthlyStats(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productivity":
			out.Values[i] = ec._UserAnalytics_productivity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focus":
			out.Values[i] = ec._UserAnalytics_focus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var userPreferencesImplementors = []string{"UserPreferences"}

func (ec *executionContext) _UserPreferences(ctx context.Context, sel ast.SelectionSet, obj *model.UserPreferences) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userPreferencesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserPreferences")
		case "id":
			out.Values[i] = ec._UserPreferences_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userId":
			out.Values[i] = ec._UserPreferences_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "theme":
			out.Values[i] = ec._UserPreferences_theme(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notifications":
			out.Values[i] = ec._UserPreferences_notifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pomodoroSettings":
			out.Values[i] = ec._UserPreferences_pomodoroSettings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timezone":
			out.Values[i] = ec._UserPreferences_timezone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var weeklyStatImplementors = []string{"WeeklyStat"}

func (ec *executionContext) _WeeklyStat(ctx context.Context, sel ast.SelectionSet, obj *model.WeeklyStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weeklyStatImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeeklyStat")
		case "weekStart":
			out.Values[i] = ec._WeeklyStat_weekStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tasksCompleted":
			out.Values[i] = ec._WeeklyStat_tasksCompleted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "xpEarned":
			out.Values[i] = ec._WeeklyStat_xpEarned(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "pomodoroSessions":
			out.Values[i] = ec._WeeklyStat_pomodoroSessions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "focusTime":
			out.Values[i] = ec._WeeklyStat_focusTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "averageProductivity":
			out.Values[i] = ec._WeeklyStat_averageProductivity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAchievement2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐAchievementᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Achievement) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAchievement2ᚖlifequestᚑserverᚋgraphᚋmodelᚐAchievement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAchievement2ᚖlifequestᚑserverᚋgraphᚋmodelᚐAchievement(ctx context.Context, sel ast.SelectionSet, v *model.Achievement) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Achievement(ctx, sel, v)
}

func (ec *executionContext) marshalNBadge2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐBadgeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Badge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBadge2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBadge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBadge2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBadge(ctx context.Context, sel ast.SelectionSet, v *model.Badge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Badge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBadgeRarity2lifequestᚑserverᚋgraphᚋmodelᚐBadgeRarity(ctx context.Context, v any) (model.BadgeRarity, error) {
	var res model.BadgeRarity
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBadgeRarity2lifequestᚑserverᚋgraphᚋmodelᚐBadgeRarity(ctx context.Context, sel ast.SelectionSet, v model.BadgeRarity) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBurndownPoint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐBurndownPointᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BurndownPoint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBurndownPoint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBurndownPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBurndownPoint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBurndownPoint(ctx context.Context, sel ast.SelectionSet, v *model.BurndownPoint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BurndownPoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCollaboratorRole2lifequestᚑserverᚋgraphᚋmodelᚐCollaboratorRole(ctx context.Context, v any) (model.CollaboratorRole, error) {
	var res model.CollaboratorRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCollaboratorRole2lifequestᚑserverᚋgraphᚋmodelᚐCollaboratorRole(ctx context.Context, sel ast.SelectionSet, v model.CollaboratorRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNCreateFolderInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateFolderInput(ctx context.Context, v any) (model.CreateFolderInput, error) {
	res, err := ec.unmarshalInputCreateFolderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePomodoroSessionInput2lifequestᚑserverᚋgraphᚋmodelᚐCreatePomodoroSessionInput(ctx context.Context, v any) (model.CreatePomodoroSessionInput, error) {
	res, err := ec.unmarshalInputCreatePomodoroSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateProjectInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateProjectInput(ctx context.Context, v any) (model.CreateProjectInput, error) {
	res, err := ec.unmarshalInputCreateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSprintInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateSprintInput(ctx context.Context, v any) (model.CreateSprintInput, error) {
	res, err := ec.unmarshalInputCreateSprintInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTaskInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateTaskInput(ctx context.Context, v any) (model.CreateTaskInput, error) {
	res, err := ec.unmarshalInputCreateTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2lifequestᚑserverᚋgraphᚋmodelᚐCreateUserInput(ctx context.Context, v any) (model.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDailyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐDailyStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DailyStat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDailyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐDailyStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDailyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐDailyStat(ctx context.Context, sel ast.SelectionSet, v *model.DailyStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DailyStat(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v any) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalNFocusAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFocusAnalytics(ctx context.Context, sel ast.SelectionSet, v *model.FocusAnalytics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FocusAnalytics(ctx, sel, v)
}

func (ec *executionContext) marshalNFolder2lifequestᚑserverᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v model.Folder) graphql.Marshaler {
	return ec._Folder(ctx, sel, &v)
}

func (ec *executionContext) marshalNFolder2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐFolderᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Folder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v *model.Folder) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMonthlyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐMonthlyStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MonthlyStat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMonthlyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐMonthlyStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMonthlyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐMonthlyStat(ctx context.Context, sel ast.SelectionSet, v *model.MonthlyStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MonthlyStat(ctx, sel, v)
}

func (ec *executionContext) marshalNNotification2lifequestᚑserverᚋgraphᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v model.Notification) graphql.Marshaler {
	return ec._Notification(ctx, sel, &v)
}

func (ec *executionContext) marshalNNotification2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Notification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNotification2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNotification2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotification(ctx context.Context, sel ast.SelectionSet, v *model.Notification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Notification(ctx, sel, v)
}

func (ec *executionContext) marshalNNotificationSettings2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationSettings(ctx context.Context, sel ast.SelectionSet, v *model.NotificationSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NotificationSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNotificationType2lifequestᚑserverᚋgraphᚋmodelᚐNotificationType(ctx context.Context, v any) (model.NotificationType, error) {
	var res model.NotificationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationType2lifequestᚑserverᚋgraphᚋmodelᚐNotificationType(ctx context.Context, sel ast.SelectionSet, v model.NotificationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPomodoroSession2lifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession(ctx context.Context, sel ast.SelectionSet, v model.PomodoroSession) graphql.Marshaler {
	return ec._PomodoroSession(ctx, sel, &v)
}

func (ec *executionContext) marshalNPomodoroSession2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSessionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PomodoroSession) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession(ctx context.Context, sel ast.SelectionSet, v *model.PomodoroSession) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PomodoroSession(ctx, sel, v)
}

func (ec *executionContext) marshalNPomodoroSettings2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSettings(ctx context.Context, sel ast.SelectionSet, v *model.PomodoroSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PomodoroSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx context.Context, v any) (model.Priority, error) {
	var res model.Priority
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPriority2lifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx context.Context, sel ast.SelectionSet, v model.Priority) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProductivityAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProductivityAnalytics(ctx context.Context, sel ast.SelectionSet, v *model.ProductivityAnalytics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductivityAnalytics(ctx, sel, v)
}

func (ec *executionContext) marshalNProject2lifequestᚑserverᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v model.Project) graphql.Marshaler {
	return ec._Project(ctx, sel, &v)
}

func (ec *executionContext) marshalNProject2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Project) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v *model.Project) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectAnalytics2lifequestᚑserverᚋgraphᚋmodelᚐProjectAnalytics(ctx context.Context, sel ast.SelectionSet, v model.ProjectAnalytics) graphql.Marshaler {
	return ec._ProjectAnalytics(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectAnalytics(ctx context.Context, sel ast.SelectionSet, v *model.ProjectAnalytics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectAnalytics(ctx, sel, v)
}

func (ec *executionContext) marshalNProjectCollaborator2lifequestᚑserverᚋgraphᚋmodelᚐProjectCollaborator(ctx context.Context, sel ast.SelectionSet, v model.ProjectCollaborator) graphql.Marshaler {
	return ec._ProjectCollaborator(ctx, sel, &v)
}

func (ec *executionContext) marshalNProjectCollaborator2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaboratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProjectCollaborator) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProjectCollaborator2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaborator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNProjectCollaborator2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectCollaborator(ctx context.Context, sel ast.SelectionSet, v *model.ProjectCollaborator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProjectCollaborator(ctx, sel, v)
}

func (ec *executionContext) unmarshalNProjectStatus2lifequestᚑserverᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, v any) (model.ProjectStatus, error) {
	var res model.ProjectStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNProjectStatus2lifequestᚑserverᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, sel ast.SelectionSet, v model.ProjectStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSessionType2lifequestᚑserverᚋgraphᚋmodelᚐSessionType(ctx context.Context, v any) (model.SessionType, error) {
	var res model.SessionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSessionType2lifequestᚑserverᚋgraphᚋmodelᚐSessionType(ctx context.Context, sel ast.SelectionSet, v model.SessionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSkill2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Skill) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkill2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkill(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkill2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkill(ctx context.Context, sel ast.SelectionSet, v *model.Skill) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Skill(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSkillCategory2lifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx context.Context, v any) (model.SkillCategory, error) {
	var res model.SkillCategory
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSkillCategory2lifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx context.Context, sel ast.SelectionSet, v model.SkillCategory) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSkillTree2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillTreeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SkillTree) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSkillTree2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillTree(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSkillTree2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillTree(ctx context.Context, sel ast.SelectionSet, v *model.SkillTree) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SkillTree(ctx, sel, v)
}

func (ec *executionContext) marshalNSprint2lifequestᚑserverᚋgraphᚋmodelᚐSprint(ctx context.Context, sel ast.SelectionSet, v model.Sprint) graphql.Marshaler {
	return ec._Sprint(ctx, sel, &v)
}

func (ec *executionContext) marshalNSprint2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Sprint) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint(ctx context.Context, sel ast.SelectionSet, v *model.Sprint) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Sprint(ctx, sel, v)
}

func (ec *executionContext) marshalNSprintAnalytics2lifequestᚑserverᚋgraphᚋmodelᚐSprintAnalytics(ctx context.Context, sel ast.SelectionSet, v model.SprintAnalytics) graphql.Marshaler {
	return ec._SprintAnalytics(ctx, sel, &v)
}

func (ec *executionContext) marshalNSprintAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintAnalytics(ctx context.Context, sel ast.SelectionSet, v *model.SprintAnalytics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SprintAnalytics(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSprintStatus2lifequestᚑserverᚋgraphᚋmodelᚐSprintStatus(ctx context.Context, v any) (model.SprintStatus, error) {
	var res model.SprintStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSprintStatus2lifequestᚑserverᚋgraphᚋmodelᚐSprintStatus(ctx context.Context, sel ast.SelectionSet, v model.SprintStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNSprintTask2lifequestᚑserverᚋgraphᚋmodelᚐSprintTask(ctx context.Context, sel ast.SelectionSet, v model.SprintTask) graphql.Marshaler {
	return ec._SprintTask(ctx, sel, &v)
}

func (ec *executionContext) marshalNSprintTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SprintTask) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSprintTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSprintTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintTask(ctx context.Context, sel ast.SelectionSet, v *model.SprintTask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SprintTask(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubtask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐSubtaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Subtask) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubtask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSubtask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubtask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSubtask(ctx context.Context, sel ast.SelectionSet, v *model.Subtask) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Subtask(ctx, sel, v)
}

func (ec *executionContext) marshalNTask2lifequestᚑserverᚋgraphᚋmodelᚐTask(ctx context.Context, sel ast.SelectionSet, v model.Task) graphql.Marshaler {
	return ec._Task(ctx, sel, &v)
}

func (ec *executionContext) marshalNTask2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Task) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask(ctx context.Context, sel ast.SelectionSet, v *model.Task) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskAttachment2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaskAttachment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskAttachment2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskAttachment2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskAttachment(ctx context.Context, sel ast.SelectionSet, v *model.TaskAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskAttachment(ctx, sel, v)
}

func (ec *executionContext) marshalNTaskComment2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TaskComment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTaskComment2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTaskComment2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskComment(ctx context.Context, sel ast.SelectionSet, v *model.TaskComment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TaskComment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTaskStatus2lifequestᚑserverᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, v any) (model.TaskStatus, error) {
	var res model.TaskStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTaskStatus2lifequestᚑserverᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, sel ast.SelectionSet, v model.TaskStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateFolderInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateFolderInput(ctx context.Context, v any) (model.UpdateFolderInput, error) {
	res, err := ec.unmarshalInputUpdateFolderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePomodoroSessionInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdatePomodoroSessionInput(ctx context.Context, v any) (model.UpdatePomodoroSessionInput, error) {
	res, err := ec.unmarshalInputUpdatePomodoroSessionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateProjectInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateProjectInput(ctx context.Context, v any) (model.UpdateProjectInput, error) {
	res, err := ec.unmarshalInputUpdateProjectInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSprintInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateSprintInput(ctx context.Context, v any) (model.UpdateSprintInput, error) {
	res, err := ec.unmarshalInputUpdateSprintInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTaskInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateTaskInput(ctx context.Context, v any) (model.UpdateTaskInput, error) {
	res, err := ec.unmarshalInputUpdateTaskInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateUserInput(ctx context.Context, v any) (model.UpdateUserInput, error) {
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUserPreferencesInput2lifequestᚑserverᚋgraphᚋmodelᚐUpdateUserPreferencesInput(ctx context.Context, v any) (model.UpdateUserPreferencesInput, error) {
	res, err := ec.unmarshalInputUpdateUserPreferencesInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2lifequestᚑserverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v model.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNUserAnalytics2lifequestᚑserverᚋgraphᚋmodelᚐUserAnalytics(ctx context.Context, sel ast.SelectionSet, v model.UserAnalytics) graphql.Marshaler {
	return ec._UserAnalytics(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserAnalytics2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserAnalytics(ctx context.Context, sel ast.SelectionSet, v *model.UserAnalytics) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserAnalytics(ctx, sel, v)
}

func (ec *executionContext) marshalNUserPreferences2lifequestᚑserverᚋgraphᚋmodelᚐUserPreferences(ctx context.Context, sel ast.SelectionSet, v model.UserPreferences) graphql.Marshaler {
	return ec._UserPreferences(ctx, sel, &v)
}

func (ec *executionContext) marshalNUserPreferences2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUserPreferences(ctx context.Context, sel ast.SelectionSet, v *model.UserPreferences) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserPreferences(ctx, sel, v)
}

func (ec *executionContext) marshalNWeeklyStat2ᚕᚖlifequestᚑserverᚋgraphᚋmodelᚐWeeklyStatᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WeeklyStat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWeeklyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐWeeklyStat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWeeklyStat2ᚖlifequestᚑserverᚋgraphᚋmodelᚐWeeklyStat(ctx context.Context, sel ast.SelectionSet, v *model.WeeklyStat) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WeeklyStat(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOBadge2ᚖlifequestᚑserverᚋgraphᚋmodelᚐBadge(ctx context.Context, sel ast.SelectionSet, v *model.Badge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Badge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOFolder2ᚖlifequestᚑserverᚋgraphᚋmodelᚐFolder(ctx context.Context, sel ast.SelectionSet, v *model.Folder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Folder(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalONotificationSettingsInput2ᚖlifequestᚑserverᚋgraphᚋmodelᚐNotificationSettingsInput(ctx context.Context, v any) (*model.NotificationSettingsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotificationSettingsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPomodoroSession2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSession(ctx context.Context, sel ast.SelectionSet, v *model.PomodoroSession) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PomodoroSession(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPomodoroSettingsInput2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPomodoroSettingsInput(ctx context.Context, v any) (*model.PomodoroSettingsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPomodoroSettingsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPriority2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx context.Context, v any) (*model.Priority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Priority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPriority2ᚖlifequestᚑserverᚋgraphᚋmodelᚐPriority(ctx context.Context, sel ast.SelectionSet, v *model.Priority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOProject2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProject(ctx context.Context, sel ast.SelectionSet, v *model.Project) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Project(ctx, sel, v)
}

func (ec *executionContext) unmarshalOProjectStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, v any) (*model.ProjectStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ProjectStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOProjectStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐProjectStatus(ctx context.Context, sel ast.SelectionSet, v *model.ProjectStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSkillCategory2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx context.Context, v any) (*model.SkillCategory, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SkillCategory)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSkillCategory2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSkillCategory(ctx context.Context, sel ast.SelectionSet, v *model.SkillCategory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSprint2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprint(ctx context.Context, sel ast.SelectionSet, v *model.Sprint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Sprint(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSprintStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintStatus(ctx context.Context, v any) (*model.SprintStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SprintStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSprintStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐSprintStatus(ctx context.Context, sel ast.SelectionSet, v *model.SprintStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTask2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTask(ctx context.Context, sel ast.SelectionSet, v *model.Task) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Task(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTaskStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, v any) (*model.TaskStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TaskStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTaskStatus2ᚖlifequestᚑserverᚋgraphᚋmodelᚐTaskStatus(ctx context.Context, sel ast.SelectionSet, v *model.TaskStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚖlifequestᚑserverᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
